{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport Color from 'color';\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useTheme } from 'react-native-paper';\nimport { clockTypes, getAngle, getHours, getHourType, getHourTypeFromOffset, getMinutes, hourTypes } from \"./timeUtils\";\nimport * as React from 'react';\nimport { useCallback } from 'react';\nimport { useLatest } from \"../utils\";\nimport AnalogClockHours from \"./AnalogClockHours\";\nimport AnimatedClockSwitcher from \"./AnimatedClockSwitcher\";\nimport AnalogClockMinutes from \"./AnalogClockMinutes\";\nexport var circleSize = 215;\n\nfunction AnalogClock(_ref) {\n  var hours = _ref.hours,\n      minutes = _ref.minutes,\n      focused = _ref.focused,\n      is24Hour = _ref.is24Hour,\n      onChange = _ref.onChange;\n  var theme = useTheme();\n  var shortPointer = hours > 12 && is24Hour;\n  var clockRef = React.useRef(null);\n  var elementX = React.useRef(0);\n  var elementY = React.useRef(0);\n  var hoursRef = useLatest(hours);\n  var onChangeRef = useLatest(onChange);\n  var minutesRef = useLatest(minutes);\n  var focusedRef = useLatest(focused);\n  var is24HourRef = useLatest(is24Hour);\n  var onPointerMove = React.useCallback(function (e, final) {\n    var x = e.nativeEvent.pageX - elementX.current;\n    var y = e.nativeEvent.pageY - elementY.current;\n    var angle = getAngle(x, y, circleSize);\n\n    if (focusedRef.current === clockTypes.hours) {\n      var previousHourType = getHourType(hoursRef.current);\n      var pickedHours = getHours(angle, previousHourType);\n\n      if (is24HourRef.current && getHourTypeFromOffset(x, y, circleSize) === hourTypes.pm || !is24HourRef.current && previousHourType === hourTypes.pm) {\n        pickedHours += 12;\n      }\n\n      if (hoursRef.current !== pickedHours || final) {\n        onChangeRef.current({\n          hours: pickedHours,\n          minutes: minutesRef.current,\n          focused: final ? clockTypes.minutes : undefined\n        });\n      }\n    } else if (focusedRef.current === clockTypes.minutes) {\n      var pickedMinutes = getMinutes(angle);\n\n      if (minutesRef.current !== pickedMinutes) {\n        onChangeRef.current({\n          hours: hoursRef.current,\n          minutes: pickedMinutes\n        });\n      }\n    }\n  }, [focusedRef, is24HourRef, hoursRef, onChangeRef, minutesRef]);\n  var panResponder = React.useRef(PanResponder.create({\n    onPanResponderGrant: function onPanResponderGrant(e) {\n      return onPointerMove(e, false);\n    },\n    onPanResponderMove: function onPanResponderMove(e) {\n      return onPointerMove(e, false);\n    },\n    onPanResponderRelease: function onPanResponderRelease(e) {\n      return onPointerMove(e, true);\n    },\n    onStartShouldSetPanResponder: returnTrue,\n    onStartShouldSetPanResponderCapture: returnTrue,\n    onMoveShouldSetPanResponder: returnTrue,\n    onMoveShouldSetPanResponderCapture: returnTrue,\n    onPanResponderTerminationRequest: returnTrue,\n    onShouldBlockNativeResponder: returnTrue\n  })).current;\n  var onLayout = useCallback(function (_) {\n    console.log('onLayout');\n\n    if (!clockRef.current) {\n      return;\n    }\n\n    clockRef.current.measureInWindow(function (x, y) {\n      elementX.current = x;\n      elementY.current = y;\n    });\n  }, [elementX, elementY]);\n  var dynamicSize = focused === clockTypes.hours && shortPointer ? 33 : 0;\n  var pointerNumber = focused === clockTypes.hours ? hours : minutes;\n  var degreesPerNumber = focused === clockTypes.hours ? 30 : 6;\n  return React.createElement(View, _extends({\n    ref: clockRef,\n    onLayout: onLayout\n  }, panResponder.panHandlers, {\n    style: [styles.clock, {\n      backgroundColor: theme.dark ? Color(theme.colors.surface).lighten(1.2).hex() : Color(theme.colors.surface).darken(0.1).hex()\n    }],\n    cursor: 'pointer'\n  }), React.createElement(View, {\n    style: [styles.line, {\n      backgroundColor: theme.colors.primary,\n      transform: [{\n        rotate: -90 + pointerNumber * degreesPerNumber + 'deg'\n      }, {\n        translateX: circleSize / 4 - 4 - dynamicSize / 2\n      }],\n      width: circleSize / 2 - 4 - dynamicSize\n    }],\n    pointerEvents: \"none\"\n  }, React.createElement(View, {\n    style: [styles.endPoint, {\n      backgroundColor: theme.colors.primary\n    }]\n  })), React.createElement(View, {\n    style: [StyleSheet.absoluteFill, styles.center],\n    pointerEvents: \"none\"\n  }, React.createElement(View, {\n    style: [styles.middlePoint, {\n      backgroundColor: theme.colors.primary\n    }]\n  })), React.createElement(AnimatedClockSwitcher, {\n    focused: focused,\n    hours: React.createElement(AnalogClockHours, {\n      is24Hour: is24Hour,\n      hours: hours\n    }),\n    minutes: React.createElement(AnalogClockMinutes, {\n      minutes: minutes\n    })\n  }));\n}\n\nvar styles = StyleSheet.create({\n  clock: {\n    height: circleSize,\n    width: circleSize,\n    position: 'relative',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: circleSize / 2\n  },\n  middlePoint: {\n    borderRadius: 4,\n    height: 8,\n    width: 8\n  },\n  center: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  endPoint: {\n    borderRadius: 15,\n    height: 30,\n    width: 30,\n    position: 'absolute',\n    right: 0,\n    bottom: -14\n  },\n  line: {\n    position: 'absolute',\n    marginBottom: -1,\n    height: 2,\n    borderRadius: 4\n  }\n});\n\nfunction returnTrue() {\n  return true;\n}\n\nexport default React.memo(AnalogClock);","map":{"version":3,"sources":["AnalogClock.tsx"],"names":["circleSize","onChange","theme","useTheme","shortPointer","hours","clockRef","React","elementX","elementY","hoursRef","useLatest","onChangeRef","minutesRef","focusedRef","is24HourRef","onPointerMove","x","e","y","angle","getAngle","clockTypes","previousHourType","getHourType","pickedHours","getHours","getHourTypeFromOffset","hourTypes","minutes","focused","final","undefined","pickedMinutes","getMinutes","panResponder","onPanResponderGrant","onPanResponderMove","onPanResponderRelease","onStartShouldSetPanResponder","onStartShouldSetPanResponderCapture","onMoveShouldSetPanResponder","onMoveShouldSetPanResponderCapture","onPanResponderTerminationRequest","onShouldBlockNativeResponder","returnTrue","onLayout","useCallback","_","console","dynamicSize","pointerNumber","degreesPerNumber","styles","backgroundColor","Color","transform","rotate","translateX","width","primary","StyleSheet","clock","height","position","justifyContent","alignItems","borderRadius","middlePoint","center","endPoint","right","bottom","line","marginBottom"],"mappings":"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","sourcesContent":["import Color from 'color';\nimport {\n  GestureResponderEvent,\n  LayoutChangeEvent,\n  PanResponder,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport { useTheme } from 'react-native-paper';\nimport {\n  clockTypes,\n  getAngle,\n  getHours,\n  getHourType,\n  getHourTypeFromOffset,\n  getMinutes,\n  hourTypes,\n  PossibleClockTypes,\n} from './timeUtils';\nimport * as React from 'react';\nimport { useCallback } from 'react';\nimport { useLatest } from '../utils';\nimport AnalogClockHours from './AnalogClockHours';\n\nimport AnimatedClockSwitcher from './AnimatedClockSwitcher';\nimport AnalogClockMinutes from './AnalogClockMinutes';\n\n// 250? when bigger?\nexport const circleSize = 215;\n\nfunction AnalogClock({\n  hours,\n  minutes,\n  focused,\n  is24Hour,\n  onChange,\n}: {\n  hours: number;\n  minutes: number;\n  focused: PossibleClockTypes;\n  is24Hour: boolean;\n  onChange: ({\n    hours,\n    minutes,\n    focused,\n  }: {\n    hours: number;\n    minutes: number;\n    focused?: undefined | PossibleClockTypes;\n  }) => any;\n}) {\n  const theme = useTheme();\n\n  // used to make pointer shorter if hours are selected and above 12\n  const shortPointer = hours > 12 && is24Hour;\n\n  const clockRef = React.useRef<View | null>(null);\n  const elementX = React.useRef<number>(0);\n  const elementY = React.useRef<number>(0);\n\n  // Hooks are nice, sometimes... :-)..\n  // We need the latest values, since the onPointerMove uses a closure to the function\n  const hoursRef = useLatest(hours);\n  const onChangeRef = useLatest(onChange);\n  const minutesRef = useLatest(minutes);\n  const focusedRef = useLatest(focused);\n  const is24HourRef = useLatest(is24Hour);\n\n  const onPointerMove = React.useCallback(\n    (e: GestureResponderEvent, final: boolean) => {\n      let x = e.nativeEvent.pageX - elementX.current;\n      let y = e.nativeEvent.pageY - elementY.current;\n\n      let angle = getAngle(x, y, circleSize);\n      if (focusedRef.current === clockTypes.hours) {\n        let previousHourType = getHourType(hoursRef.current);\n        let pickedHours = getHours(angle, previousHourType);\n\n        // TODO: check which mode is switched on am/pm\n        if (\n          (is24HourRef.current &&\n            getHourTypeFromOffset(x, y, circleSize) === hourTypes.pm) ||\n          (!is24HourRef.current && previousHourType === hourTypes.pm)\n        ) {\n          pickedHours += 12;\n        }\n        if (hoursRef.current !== pickedHours || final) {\n          onChangeRef.current({\n            hours: pickedHours,\n            minutes: minutesRef.current,\n            focused: final ? clockTypes.minutes : undefined,\n          });\n        }\n      } else if (focusedRef.current === clockTypes.minutes) {\n        let pickedMinutes = getMinutes(angle);\n        if (minutesRef.current !== pickedMinutes) {\n          onChangeRef.current({\n            hours: hoursRef.current,\n            minutes: pickedMinutes,\n          });\n        }\n      }\n    },\n    [focusedRef, is24HourRef, hoursRef, onChangeRef, minutesRef]\n  );\n\n  const panResponder = React.useRef(\n    PanResponder.create({\n      onPanResponderGrant: (e) => onPointerMove(e, false),\n      onPanResponderMove: (e) => onPointerMove(e, false),\n      onPanResponderRelease: (e) => onPointerMove(e, true),\n\n      onStartShouldSetPanResponder: returnTrue,\n      onStartShouldSetPanResponderCapture: returnTrue,\n      onMoveShouldSetPanResponder: returnTrue,\n      onMoveShouldSetPanResponderCapture: returnTrue,\n      onPanResponderTerminationRequest: returnTrue,\n      onShouldBlockNativeResponder: returnTrue,\n    })\n  ).current;\n\n  const onLayout = useCallback(\n    (_: LayoutChangeEvent) => {\n      console.log('onLayout');\n      if (!clockRef.current) {\n        return;\n      }\n      clockRef.current.measureInWindow((x, y) => {\n        elementX.current = x;\n        elementY.current = y;\n      });\n    },\n    [elementX, elementY]\n  );\n\n  const dynamicSize = focused === clockTypes.hours && shortPointer ? 33 : 0;\n  const pointerNumber = focused === clockTypes.hours ? hours : minutes;\n  const degreesPerNumber = focused === clockTypes.hours ? 30 : 6;\n  return (\n    <View\n      ref={clockRef}\n      onLayout={onLayout}\n      {...panResponder.panHandlers}\n      style={[\n        styles.clock,\n        {\n          backgroundColor: theme.dark\n            ? Color(theme.colors.surface).lighten(1.2).hex()\n            : Color(theme.colors.surface).darken(0.1).hex(),\n        },\n      ]}\n      //@ts-ignore -> https://github.com/necolas/react-native-web/issues/506\n      cursor={'pointer'}\n    >\n      <View\n        style={[\n          styles.line,\n          {\n            backgroundColor: theme.colors.primary,\n            transform: [\n              { rotate: -90 + pointerNumber * degreesPerNumber + 'deg' },\n              {\n                translateX: circleSize / 4 - 4 - dynamicSize / 2,\n              },\n            ],\n            width: circleSize / 2 - 4 - dynamicSize,\n          },\n        ]}\n        pointerEvents=\"none\"\n      >\n        <View\n          style={[styles.endPoint, { backgroundColor: theme.colors.primary }]}\n        />\n      </View>\n      <View\n        style={[StyleSheet.absoluteFill, styles.center]}\n        pointerEvents=\"none\"\n      >\n        <View\n          style={[\n            styles.middlePoint,\n            {\n              backgroundColor: theme.colors.primary,\n            },\n          ]}\n        />\n      </View>\n      <AnimatedClockSwitcher\n        focused={focused}\n        hours={<AnalogClockHours is24Hour={is24Hour} hours={hours} />}\n        minutes={<AnalogClockMinutes minutes={minutes} />}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  clock: {\n    height: circleSize,\n    width: circleSize,\n    position: 'relative',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: circleSize / 2,\n  },\n  middlePoint: {\n    borderRadius: 4,\n    height: 8,\n    width: 8,\n  },\n  center: { justifyContent: 'center', alignItems: 'center' },\n  endPoint: {\n    borderRadius: 15,\n    height: 30,\n    width: 30,\n    position: 'absolute',\n    right: 0,\n    bottom: -14,\n  },\n  line: {\n    position: 'absolute',\n\n    marginBottom: -1,\n    height: 2,\n    borderRadius: 4,\n  },\n});\n\nfunction returnTrue() {\n  return true;\n}\n\nexport default React.memo(AnalogClock);\n"]},"metadata":{},"sourceType":"module"}