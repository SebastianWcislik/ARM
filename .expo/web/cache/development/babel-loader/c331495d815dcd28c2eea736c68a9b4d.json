{"ast":null,"code":"import { useEffect, useState } from \"react\";\nvar serwerAdress = \"http://192.168.0.27:3000\";\n\nvar mockSuccess = function mockSuccess(value) {\n  return new Promise(function (resolve) {\n    setTimeout(function () {\n      return resolve(value);\n    }, 100);\n  });\n};\n\nvar mockFailure = function mockFailure(value) {\n  return new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      return reject(value);\n    }, 100);\n  });\n};\n\nexport function login(username, password, resUser) {\n  var result = mockSuccess();\n  fetch(serwerAdress + \"/userToLogin?username=\" + '\"' + username + '\"').then(function (response) {\n    return response.json();\n  }).then(function (json) {\n    if (username != json[0].Name) {\n      result = mockFailure({\n        error: 500,\n        message: \"Wpisano złe hasło, spróbuj ponownie\"\n      });\n    }\n\n    result = mockSuccess({\n      id: resUser[0].Id,\n      auth_token: \"successful_fake_token\"\n    });\n  });\n  return result;\n}\nexport var createAccount = function createAccount(email, password) {\n  var shouldSucceed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  console.log(email, password);\n\n  if (!shouldSucceed) {\n    return mockFailure({\n      error: 500,\n      message: \"Something went wrong!\"\n    });\n  }\n\n  return mockSuccess({\n    auth_token: \"successful_fake_token\"\n  });\n};","map":{"version":3,"sources":["F:/VSCode Projects/ARM/API/mock.js"],"names":["useEffect","useState","serwerAdress","mockSuccess","value","Promise","resolve","setTimeout","mockFailure","reject","login","username","password","resUser","result","fetch","then","response","json","Name","error","message","id","Id","auth_token","createAccount","email","shouldSucceed","console","log"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,IAAMC,YAAY,GAAG,0BAArB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;AAC7B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BC,IAAAA,UAAU,CAAC;AAAA,aAAMD,OAAO,CAACF,KAAD,CAAb;AAAA,KAAD,EAAuB,GAAvB,CAAV;AACD,GAFM,CAAP;AAGD,CAJD;;AAMA,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAACJ,KAAD,EAAW;AAC7B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUG,MAAV,EAAqB;AACtCF,IAAAA,UAAU,CAAC;AAAA,aAAME,MAAM,CAACL,KAAD,CAAZ;AAAA,KAAD,EAAsB,GAAtB,CAAV;AACD,GAFM,CAAP;AAGD,CAJD;;AAMA,OAAO,SAASM,KAAT,CAAeC,QAAf,EAAyBC,QAAzB,EAAmCC,OAAnC,EAA4C;AAEjD,MAAIC,MAAM,GAAGX,WAAW,EAAxB;AAEAY,EAAAA,KAAK,CAACb,YAAY,GAAG,wBAAf,GAA0C,GAA1C,GAAgDS,QAAhD,GAA2D,GAA5D,CAAL,CACGK,IADH,CACQ,UAACC,QAAD;AAAA,WAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,GADR,EAEGF,IAFH,CAEQ,UAACE,IAAD,EAAU;AACd,QAAIP,QAAQ,IAAIO,IAAI,CAAC,CAAD,CAAJ,CAAQC,IAAxB,EAA8B;AAC5BL,MAAAA,MAAM,GAAGN,WAAW,CAAC;AACnBY,QAAAA,KAAK,EAAE,GADY;AAEnBC,QAAAA,OAAO,EAAE;AAFU,OAAD,CAApB;AAID;;AAEDP,IAAAA,MAAM,GAAGX,WAAW,CAAC;AACnBmB,MAAAA,EAAE,EAAET,OAAO,CAAC,CAAD,CAAP,CAAWU,EADI;AAEnBC,MAAAA,UAAU,EAAE;AAFO,KAAD,CAApB;AAID,GAdH;AAgBA,SAAOV,MAAP;AACD;AAED,OAAO,IAAMW,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAQd,QAAR,EAA2C;AAAA,MAAzBe,aAAyB,uEAAT,IAAS;AACtEC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAAmBd,QAAnB;;AAEA,MAAI,CAACe,aAAL,EAAoB;AAClB,WAAOnB,WAAW,CAAC;AAAEY,MAAAA,KAAK,EAAE,GAAT;AAAcC,MAAAA,OAAO,EAAE;AAAvB,KAAD,CAAlB;AACD;;AAED,SAAOlB,WAAW,CAAC;AAAEqB,IAAAA,UAAU,EAAE;AAAd,GAAD,CAAlB;AACD,CARM","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst serwerAdress = \"http://192.168.0.27:3000\";\r\n\r\nconst mockSuccess = (value) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => resolve(value), 100);\r\n  });\r\n};\r\n\r\nconst mockFailure = (value) => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => reject(value), 100);\r\n  });\r\n};\r\n\r\nexport function login(username, password, resUser) {\r\n  //console.log(username, password, resUser);\r\n  var result = mockSuccess();\r\n\r\n  fetch(serwerAdress + \"/userToLogin?username=\" + '\"' + username + '\"')\r\n    .then((response) => response.json())\r\n    .then((json) => {\r\n      if (username != json[0].Name) {\r\n        result = mockFailure({\r\n          error: 500,\r\n          message: \"Wpisano złe hasło, spróbuj ponownie\",\r\n        });\r\n      }\r\n\r\n      result = mockSuccess({\r\n        id: resUser[0].Id,\r\n        auth_token: \"successful_fake_token\",\r\n      });\r\n    });\r\n\r\n  return result;\r\n}\r\n\r\nexport const createAccount = (email, password, shouldSucceed = true) => {\r\n  console.log(email, password);\r\n\r\n  if (!shouldSucceed) {\r\n    return mockFailure({ error: 500, message: \"Something went wrong!\" });\r\n  }\r\n\r\n  return mockSuccess({ auth_token: \"successful_fake_token\" });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}