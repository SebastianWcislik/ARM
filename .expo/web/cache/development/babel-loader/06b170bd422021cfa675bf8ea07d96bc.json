{"ast":null,"code":"import * as React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { IconButton, Text, useTheme, TouchableRipple } from 'react-native-paper';\nimport Day, { EmptyDay } from \"./Day\";\nimport { addMonths, areDatesOnSameDay, daySize, getDaysInMonth, getFirstDayOfMonth, getRealIndex, gridCounts, isDateBetween } from \"./dateUtils\";\nimport { getCalendarHeaderHeight } from \"./CalendarHeader\";\n\nvar monthGrid = function monthGrid(index) {\n  console.log('monthGrid', index, gridCounts[index]);\n  return Array(gridCounts[index]).fill(null).map(function (_, weekGrid) {\n    var days = Array(7).fill(null);\n    return {\n      weekGrid: weekGrid,\n      days: days\n    };\n  });\n};\n\nexport function getMonthsOffset(scrollMode, index) {\n  var calendarHeight = getCalendarHeaderHeight(scrollMode);\n  var monthsHeight = weekSize * gridCounts.slice(0, index).reduce(function (a, b) {\n    return a + b;\n  }, 0);\n  var extraHeight = scrollMode === 'horizontal' ? monthHeaderSingleHeight : montHeaderHeight;\n  var c = index * calendarHeight + monthsHeight + index * extraHeight;\n  return c || 0;\n}\nexport function getMonthHeight(scrollMode, index) {\n  var calendarHeight = getCalendarHeaderHeight(scrollMode);\n  var gridCount = gridCounts[index];\n  var currentMonthHeight = weekSize * gridCount;\n  var extraHeight = scrollMode === 'horizontal' ? monthHeaderSingleHeight : montHeaderHeight;\n  var c = calendarHeight + currentMonthHeight + extraHeight;\n  return c || 0;\n}\n\nfunction Month(_ref) {\n  var index = _ref.index,\n      mode = _ref.mode,\n      date = _ref.date,\n      startDate = _ref.startDate,\n      endDate = _ref.endDate,\n      onPressYear = _ref.onPressYear,\n      selectingYear = _ref.selectingYear,\n      onPressDate = _ref.onPressDate,\n      scrollMode = _ref.scrollMode,\n      primaryColor = _ref.primaryColor,\n      selectColor = _ref.selectColor,\n      roundness = _ref.roundness;\n  var theme = useTheme();\n  var realIndex = getRealIndex(index);\n  var isHorizontal = scrollMode === 'horizontal';\n  var monthDate = addMonths(new Date(), realIndex + 1);\n  var year = monthDate.getFullYear();\n  var month = monthDate.getMonth();\n  var monthFormatter = new Intl.DateTimeFormat(undefined, {\n    month: 'long'\n  });\n  var monthName = monthFormatter.format(monthDate);\n  var grid = React.useMemo(function () {\n    var today = new Date();\n    var daysInMonth = getDaysInMonth({\n      year: year,\n      month: month\n    });\n    var dayOfWeek = getFirstDayOfMonth({\n      year: year,\n      month: month\n    });\n    var emptyDays = dayOfWeek;\n    return monthGrid(index).map(function (_ref2) {\n      var days = _ref2.days,\n          weekGrid = _ref2.weekGrid;\n      return {\n        weekIndex: weekGrid,\n        generatedDays: days.map(function (_, dayIndex) {\n          var isFirstWeek = weekGrid === 0;\n          var realDayIndex = emptyDays - dayIndex;\n          var beforeWeekDay = isFirstWeek && realDayIndex > 0;\n          var dayOfMonth = weekGrid * 7 + dayIndex - emptyDays + 1;\n          var afterWeekDay = dayOfMonth > daysInMonth;\n          var day = new Date(year, month, dayOfMonth);\n          var isToday = areDatesOnSameDay(day, today);\n          var selectedStartDay = areDatesOnSameDay(day, startDate);\n          var selectedEndDay = areDatesOnSameDay(day, endDate);\n          var selectedDay = areDatesOnSameDay(day, date);\n          var selected = mode === 'range' ? selectedStartDay || selectedEndDay : selectedDay;\n          var inRange = mode === 'range' ? isDateBetween(day, {\n            startDate: startDate,\n            endDate: endDate\n          }) : false;\n          var leftCrop = selectedStartDay || dayOfMonth === 1;\n          var rightCrop = selectedEndDay || dayOfMonth === daysInMonth;\n\n          if (dayIndex === 0 && !selectedStartDay) {\n            leftCrop = false;\n          }\n\n          if (dayIndex === 6 && !selectedEndDay) {\n            rightCrop = false;\n          }\n\n          return {\n            beforeWeekDay: beforeWeekDay,\n            afterWeekDay: afterWeekDay,\n            year: year,\n            month: month,\n            dayOfMonth: dayOfMonth,\n            dayIndex: dayIndex,\n            mode: mode,\n            selected: selected,\n            inRange: inRange,\n            leftCrop: leftCrop,\n            rightCrop: rightCrop,\n            isToday: isToday\n          };\n        })\n      };\n    });\n  }, [mode, index, startDate, endDate, date, month, year]);\n  console.log(year, monthName);\n  grid.forEach(function (_ref3) {\n    var weekIndex = _ref3.weekIndex,\n        generatedDays = _ref3.generatedDays;\n    console.log({\n      weekIndex: weekIndex,\n      days: generatedDays.length\n    });\n  });\n  return React.createElement(View, {\n    style: [styles.month, {\n      height: getMonthHeight(scrollMode, index)\n    }]\n  }, React.createElement(View, {\n    style: [styles.monthHeader, isHorizontal ? {\n      marginTop: monthHeaderSingleMarginTop,\n      marginBottom: monthHeaderSingleMarginBottom\n    } : null]\n  }, React.createElement(TouchableRipple, {\n    disabled: !isHorizontal,\n    onPress: isHorizontal ? function () {\n      return onPressYear(year);\n    } : undefined,\n    style: [styles.yearButton, {\n      borderRadius: roundness\n    }]\n  }, React.createElement(View, {\n    style: [styles.yearButtonInner, {\n      borderRadius: roundness\n    }]\n  }, React.createElement(Text, {\n    style: [styles.monthLabel, theme.fonts.medium],\n    selectable: false\n  }, monthName, \" \", year), React.createElement(View, {\n    style: isHorizontal ? styles.opacity1 : styles.opacity0\n  }, React.createElement(IconButton, {\n    icon: selectingYear ? 'chevron-up' : 'chevron-down'\n  }))))), grid.map(function (_ref4) {\n    var weekIndex = _ref4.weekIndex,\n        generatedDays = _ref4.generatedDays;\n    return React.createElement(View, {\n      style: [styles.week, I18nManager.isRTL ? styles.weekRtl : null],\n      key: weekIndex\n    }, generatedDays.map(function (gd) {\n      return gd.beforeWeekDay || gd.afterWeekDay ? React.createElement(EmptyDay, {\n        key: gd.dayIndex\n      }) : React.createElement(Day, {\n        key: gd.dayIndex,\n        day: gd.dayOfMonth,\n        month: gd.month,\n        year: gd.year,\n        selected: gd.selected,\n        inRange: gd.inRange,\n        leftCrop: gd.leftCrop,\n        rightCrop: gd.rightCrop,\n        onPressDate: onPressDate,\n        isToday: gd.isToday,\n        selectColor: selectColor,\n        primaryColor: primaryColor\n      });\n    }));\n  }));\n}\n\nexport var weekMargin = 6;\nexport var weekSize = daySize + weekMargin;\nvar montHeaderHeight = 56;\nvar monthHeaderSingleMarginTop = 4;\nvar monthHeaderSingleMarginBottom = 8 + 44 + 12;\nvar monthHeaderSingleHeight = monthHeaderSingleMarginTop + monthHeaderSingleMarginBottom;\nvar styles = StyleSheet.create({\n  week: {\n    flexDirection: 'row',\n    marginBottom: weekMargin,\n    height: daySize\n  },\n  weekRtl: {},\n  month: {},\n  monthHeader: {\n    height: montHeaderHeight,\n    justifyContent: 'center',\n    overflow: 'hidden'\n  },\n  monthLabel: {\n    fontSize: 14,\n    opacity: 0.7\n  },\n  yearButton: {\n    alignSelf: 'flex-start',\n    marginLeft: 6\n  },\n  yearButtonInner: {\n    paddingLeft: 16,\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  opacity0: {\n    opacity: 0\n  },\n  opacity1: {\n    opacity: 1\n  }\n});\nexport default React.memo(Month);","map":{"version":3,"sources":["Month.tsx"],"names":["monthGrid","index","console","gridCounts","days","Array","weekGrid","calendarHeight","getCalendarHeaderHeight","monthsHeight","weekSize","a","extraHeight","scrollMode","c","gridCount","currentMonthHeight","roundness","theme","useTheme","realIndex","getRealIndex","isHorizontal","monthDate","addMonths","year","month","monthFormatter","Intl","monthName","grid","today","daysInMonth","getDaysInMonth","dayOfWeek","getFirstDayOfMonth","emptyDays","weekIndex","generatedDays","isFirstWeek","realDayIndex","beforeWeekDay","dayOfMonth","afterWeekDay","day","isToday","areDatesOnSameDay","selectedStartDay","selectedEndDay","selectedDay","selected","mode","inRange","isDateBetween","startDate","endDate","leftCrop","rightCrop","dayIndex","length","styles","height","getMonthHeight","marginTop","marginBottom","monthHeaderSingleMarginBottom","onPressYear","borderRadius","opacity0","selectingYear","I18nManager","gd","primaryColor","weekMargin","daySize","montHeaderHeight","monthHeaderSingleMarginTop","monthHeaderSingleHeight","week","flexDirection","weekRtl","monthHeader","justifyContent","overflow","monthLabel","fontSize","opacity","yearButton","alignSelf","marginLeft","yearButtonInner","paddingLeft","alignItems","opacity1","React"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { I18nManager, StyleSheet, View } from 'react-native';\nimport {\n  IconButton,\n  Text,\n  useTheme,\n  TouchableRipple,\n} from 'react-native-paper';\nimport Day, { EmptyDay } from './Day';\n\nimport {\n  addMonths,\n  areDatesOnSameDay,\n  daySize,\n  getDaysInMonth,\n  getFirstDayOfMonth,\n  getRealIndex,\n  gridCounts,\n  isDateBetween,\n} from './dateUtils';\nimport { getCalendarHeaderHeight } from './CalendarHeader';\n\ninterface BaseMonthProps {\n  scrollMode: 'horizontal' | 'vertical';\n\n  mode: 'single' | 'range';\n  date?: Date | null | undefined;\n  startDate?: Date | null | undefined;\n  endDate?: Date | null | undefined;\n  index: number;\n  onPressYear: (year: number) => any;\n  selectedYear: number | undefined;\n  selectingYear: boolean;\n  onPressDate: (date: Date) => any;\n  primaryColor: string;\n  selectColor: string;\n  roundness: number;\n}\n\ninterface MonthRangeProps extends BaseMonthProps {\n  mode: 'range';\n  startDate: Date | null | undefined;\n  endDate: Date | null | undefined;\n}\n\ninterface MonthSingleProps extends BaseMonthProps {\n  mode: 'single';\n  date?: Date | null | undefined;\n}\n\nconst monthGrid = (index: number) => {\n  console.log('monthGrid', index, gridCounts[index]);\n  return Array(gridCounts[index])\n    .fill(null)\n    .map((_, weekGrid) => {\n      const days = Array(7).fill(null);\n      return { weekGrid, days };\n    });\n};\n\nexport function getMonthsOffset(\n  scrollMode: 'horizontal' | 'vertical',\n  index: number\n) {\n  const calendarHeight = getCalendarHeaderHeight(scrollMode);\n  const monthsHeight =\n    weekSize * gridCounts.slice(0, index).reduce((a, b) => a + b, 0);\n  const extraHeight =\n    scrollMode === 'horizontal' ? monthHeaderSingleHeight : montHeaderHeight;\n\n  const c = index * calendarHeight + monthsHeight + index * extraHeight;\n\n  return c || 0;\n}\n\nexport function getMonthHeight(\n  scrollMode: 'horizontal' | 'vertical',\n  index: number\n): number {\n  const calendarHeight = getCalendarHeaderHeight(scrollMode);\n  const gridCount = gridCounts[index];\n\n  const currentMonthHeight = weekSize * gridCount;\n  const extraHeight =\n    scrollMode === 'horizontal' ? monthHeaderSingleHeight : montHeaderHeight;\n  const c = calendarHeight + currentMonthHeight + extraHeight;\n  return c || 0;\n}\n\nfunction Month({\n  index,\n  mode,\n  date,\n  startDate,\n  endDate,\n  onPressYear,\n  // selectedYear, // TODO: scroll to right month in another year\n  selectingYear,\n  onPressDate,\n  scrollMode,\n  primaryColor,\n  selectColor,\n  roundness,\n}: MonthSingleProps | MonthRangeProps) {\n  const theme = useTheme();\n  const realIndex = getRealIndex(index);\n  const isHorizontal = scrollMode === 'horizontal';\n\n  const monthDate = addMonths(new Date(), realIndex + 1);\n  const year = monthDate.getFullYear();\n  const month = monthDate.getMonth();\n\n  const monthFormatter = new Intl.DateTimeFormat(undefined, {\n    month: 'long',\n  });\n\n  const monthName = monthFormatter.format(monthDate);\n\n  const grid = React.useMemo(() => {\n    const today = new Date();\n\n    const daysInMonth = getDaysInMonth({ year, month });\n    const dayOfWeek = getFirstDayOfMonth({ year, month });\n    const emptyDays = dayOfWeek;\n\n    return monthGrid(index).map(({ days, weekGrid }) => {\n      return {\n        weekIndex: weekGrid,\n        generatedDays: days.map((_, dayIndex) => {\n          const isFirstWeek = weekGrid === 0;\n          const realDayIndex = emptyDays - dayIndex;\n          const beforeWeekDay = isFirstWeek && realDayIndex > 0;\n          const dayOfMonth = weekGrid * 7 + dayIndex - emptyDays + 1;\n          const afterWeekDay = dayOfMonth > daysInMonth;\n\n          const day = new Date(year, month, dayOfMonth);\n          const isToday = areDatesOnSameDay(day, today);\n          const selectedStartDay = areDatesOnSameDay(day, startDate);\n          const selectedEndDay = areDatesOnSameDay(day, endDate);\n          const selectedDay = areDatesOnSameDay(day, date);\n\n          const selected =\n            mode === 'range' ? selectedStartDay || selectedEndDay : selectedDay;\n          let inRange =\n            mode === 'range'\n              ? isDateBetween(day, {\n                  startDate,\n                  endDate,\n                })\n              : false;\n\n          let leftCrop: boolean = selectedStartDay || dayOfMonth === 1;\n          let rightCrop: boolean = selectedEndDay || dayOfMonth === daysInMonth;\n\n          if (dayIndex === 0 && !selectedStartDay) {\n            leftCrop = false;\n          }\n\n          if (dayIndex === 6 && !selectedEndDay) {\n            rightCrop = false;\n          }\n\n          return {\n            beforeWeekDay,\n            afterWeekDay,\n            year,\n            month,\n            dayOfMonth,\n            dayIndex,\n            mode,\n            selected,\n            inRange,\n            leftCrop,\n            rightCrop,\n            isToday,\n          };\n        }),\n      };\n    });\n  }, [mode, index, startDate, endDate, date, month, year]);\n\n  console.log(year, monthName);\n  grid.forEach(({ weekIndex, generatedDays }) => {\n    console.log({ weekIndex, days: generatedDays.length });\n  });\n\n  return (\n    <View style={[styles.month, { height: getMonthHeight(scrollMode, index) }]}>\n      <View\n        style={[\n          styles.monthHeader,\n          isHorizontal\n            ? {\n                marginTop: monthHeaderSingleMarginTop,\n                marginBottom: monthHeaderSingleMarginBottom,\n              }\n            : null,\n        ]}\n      >\n        <TouchableRipple\n          disabled={!isHorizontal}\n          onPress={isHorizontal ? () => onPressYear(year) : undefined}\n          style={[\n            styles.yearButton,\n            {\n              borderRadius: roundness,\n            },\n          ]}\n        >\n          <View\n            style={[\n              styles.yearButtonInner,\n              {\n                borderRadius: roundness,\n              },\n            ]}\n          >\n            <Text\n              style={[styles.monthLabel, theme.fonts.medium]}\n              selectable={false}\n            >\n              {monthName} {year}\n            </Text>\n            <View style={isHorizontal ? styles.opacity1 : styles.opacity0}>\n              <IconButton\n                icon={selectingYear ? 'chevron-up' : 'chevron-down'}\n              />\n            </View>\n          </View>\n        </TouchableRipple>\n      </View>\n\n      {grid.map(({ weekIndex, generatedDays }) => (\n        <View\n          style={[styles.week, I18nManager.isRTL ? styles.weekRtl : null]}\n          key={weekIndex}\n        >\n          {generatedDays.map((gd) =>\n            gd.beforeWeekDay || gd.afterWeekDay ? (\n              <EmptyDay key={gd.dayIndex} />\n            ) : (\n              <Day\n                key={gd.dayIndex}\n                day={gd.dayOfMonth}\n                month={gd.month}\n                year={gd.year}\n                selected={gd.selected}\n                inRange={gd.inRange}\n                leftCrop={gd.leftCrop}\n                rightCrop={gd.rightCrop}\n                onPressDate={onPressDate}\n                isToday={gd.isToday}\n                selectColor={selectColor}\n                primaryColor={primaryColor}\n              />\n            )\n          )}\n        </View>\n      ))}\n    </View>\n  );\n}\n\nexport const weekMargin = 6;\nexport const weekSize = daySize + weekMargin;\nconst montHeaderHeight = 56;\nconst monthHeaderSingleMarginTop = 4;\nconst monthHeaderSingleMarginBottom = 8 + 44 + 12;\nconst monthHeaderSingleHeight =\n  monthHeaderSingleMarginTop + monthHeaderSingleMarginBottom;\n\nconst styles = StyleSheet.create({\n  week: {\n    flexDirection: 'row',\n    marginBottom: weekMargin,\n    height: daySize,\n  },\n  weekRtl: {\n    // flexDirection: 'row-reverse',\n  },\n  month: {},\n\n  monthHeader: {\n    height: montHeaderHeight,\n    justifyContent: 'center',\n    overflow: 'hidden',\n  },\n  monthLabel: { fontSize: 14, opacity: 0.7 },\n  yearButton: { alignSelf: 'flex-start', marginLeft: 6 },\n  yearButtonInner: {\n    paddingLeft: 16,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  opacity0: { opacity: 0 },\n  opacity1: { opacity: 1 },\n});\n\nexport default React.memo(Month);\n"]},"metadata":{},"sourceType":"module"}