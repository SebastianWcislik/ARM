{"ast":null,"code":"import { useEffect, useState } from \"react\";\n\nvar mockSuccess = function mockSuccess(value) {\n  return new Promise(function (resolve) {\n    setTimeout(function () {\n      return resolve(value);\n    }, 100);\n  });\n};\n\nvar mockFailure = function mockFailure(value) {\n  return new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      return reject(value);\n    }, 100);\n  });\n};\n\nexport function login(username, password, resUser) {\n  if (password != resUser[0].password) {\n    return mockFailure({\n      error: 500,\n      message: \"Wpisano złe hasło, spróbuj ponownie\"\n    });\n  }\n\n  return mockSuccess({\n    id: resUser[0].Id,\n    auth_token: \"successful_fake_token\"\n  });\n}\nexport var createAccount = function createAccount(email, password) {\n  var shouldSucceed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  console.log(email, password);\n\n  if (!shouldSucceed) {\n    return mockFailure({\n      error: 500,\n      message: \"Something went wrong!\"\n    });\n  }\n\n  return mockSuccess({\n    auth_token: \"successful_fake_token\"\n  });\n};","map":{"version":3,"sources":["F:/VSCode Projects/ARM/API/mock.js"],"names":["useEffect","useState","mockSuccess","value","Promise","resolve","setTimeout","mockFailure","reject","login","username","password","resUser","error","message","id","Id","auth_token","createAccount","email","shouldSucceed","console","log"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;AAC7B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BC,IAAAA,UAAU,CAAC;AAAA,aAAMD,OAAO,CAACF,KAAD,CAAb;AAAA,KAAD,EAAuB,GAAvB,CAAV;AACD,GAFM,CAAP;AAGD,CAJD;;AAMA,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAACJ,KAAD,EAAW;AAC7B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUG,MAAV,EAAqB;AACtCF,IAAAA,UAAU,CAAC;AAAA,aAAME,MAAM,CAACL,KAAD,CAAZ;AAAA,KAAD,EAAsB,GAAtB,CAAV;AACD,GAFM,CAAP;AAGD,CAJD;;AAMA,OAAO,SAASM,KAAT,CAAeC,QAAf,EAAyBC,QAAzB,EAAmCC,OAAnC,EAA4C;AAGjD,MAAID,QAAQ,IAAIC,OAAO,CAAC,CAAD,CAAP,CAAWD,QAA3B,EAAqC;AACnC,WAAOJ,WAAW,CAAC;AACjBM,MAAAA,KAAK,EAAE,GADU;AAEjBC,MAAAA,OAAO,EAAE;AAFQ,KAAD,CAAlB;AAID;;AAED,SAAOZ,WAAW,CAAC;AACjBa,IAAAA,EAAE,EAAEH,OAAO,CAAC,CAAD,CAAP,CAAWI,EADE;AAEjBC,IAAAA,UAAU,EAAE;AAFK,GAAD,CAAlB;AAID;AAED,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAQR,QAAR,EAA2C;AAAA,MAAzBS,aAAyB,uEAAT,IAAS;AACtEC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAAmBR,QAAnB;;AAEA,MAAI,CAACS,aAAL,EAAoB;AAClB,WAAOb,WAAW,CAAC;AAAEM,MAAAA,KAAK,EAAE,GAAT;AAAcC,MAAAA,OAAO,EAAE;AAAvB,KAAD,CAAlB;AACD;;AAED,SAAOZ,WAAW,CAAC;AAAEe,IAAAA,UAAU,EAAE;AAAd,GAAD,CAAlB;AACD,CARM","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst mockSuccess = (value) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => resolve(value), 100);\r\n  });\r\n};\r\n\r\nconst mockFailure = (value) => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => reject(value), 100);\r\n  });\r\n};\r\n\r\nexport function login(username, password, resUser) {\r\n  //console.log(username, password, resUser);\r\n\r\n  if (password != resUser[0].password) {\r\n    return mockFailure({\r\n      error: 500,\r\n      message: \"Wpisano złe hasło, spróbuj ponownie\",\r\n    });\r\n  }\r\n\r\n  return mockSuccess({\r\n    id: resUser[0].Id,\r\n    auth_token: \"successful_fake_token\",\r\n  });\r\n}\r\n\r\nexport const createAccount = (email, password, shouldSucceed = true) => {\r\n  console.log(email, password);\r\n\r\n  if (!shouldSucceed) {\r\n    return mockFailure({ error: 500, message: \"Something went wrong!\" });\r\n  }\r\n\r\n  return mockSuccess({ auth_token: \"successful_fake_token\" });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}