{"ast":null,"code":"import * as React from 'react';\nexport function useLatest(value) {\n  var valueRef = React.useRef(value);\n  React.useEffect(function () {\n    valueRef.current = value;\n  }, [value]);\n  return valueRef;\n}\nexport function usePrevious(value) {\n  var ref = React.useRef();\n  React.useEffect(function () {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\nexport function range(start, end) {\n  return Array(end - start + 1).fill(null).map(function (_, i) {\n    return start + i;\n  });\n}","map":{"version":3,"sources":["utils.ts"],"names":["valueRef","React","ref","Array","end","start"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,OAAO,SAAA,SAAA,CAAA,KAAA,EAAgC;AACrC,MAAMA,QAAQ,GAAGC,KAAK,CAALA,MAAAA,CAAjB,KAAiBA,CAAjB;AACAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpBD,IAAAA,QAAQ,CAARA,OAAAA,GAAAA,KAAAA;AADFC,GAAAA,EAEG,CAFHA,KAEG,CAFHA;AAGA,SAAA,QAAA;AAGF;AACA,OAAO,SAAA,WAAA,CAAA,KAAA,EAAkC;AAGvC,MAAMC,GAAG,GAAGD,KAAK,CAHsB,MAG3BA,EAAZ;AAGAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpBC,IAAAA,GAAG,CAAHA,OAAAA,GAAAA,KAAAA;AADFD,GAAAA,EAEG,CARoC,KAQpC,CAFHA;AAKA,SAAOC,GAAG,CAAV,OAAA;AACD;AAED,OAAO,SAAA,KAAA,CAAA,KAAA,EAAA,GAAA,EAA2C;AAChD,SAAOC,KAAK,CAACC,GAAG,GAAHA,KAAAA,GAAND,CAAK,CAALA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,GAAAA,CAEA,UAAA,CAAA,EAAA,CAAA;AAAA,WAAUE,KAAK,GAFtB,CAEO;AAAA,GAFAF,CAAP;AAGD","sourcesContent":["import * as React from 'react';\n\nexport function useLatest<T>(value: T) {\n  const valueRef = React.useRef<T>(value);\n  React.useEffect(() => {\n    valueRef.current = value;\n  }, [value]);\n  return valueRef;\n}\n\n// Hook\nexport function usePrevious<T>(value: T) {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = React.useRef<T>();\n\n  // Store current value in ref\n  React.useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}\n\nexport function range(start: number, end: number) {\n  return Array(end - start + 1)\n    .fill(null)\n    .map((_, i) => start + i);\n}\n"]},"metadata":{},"sourceType":"module"}