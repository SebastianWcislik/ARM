{"ast":null,"code":"import * as React from 'react';\nimport { Text, TouchableRipple, useTheme } from 'react-native-paper';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport DayRange from \"./DayRange\";\nimport { daySize } from \"./dateUtils\";\n\nfunction EmptyDayPure() {\n  return React.createElement(View, {\n    style: styles.empty\n  });\n}\n\nexport var EmptyDay = React.memo(EmptyDayPure);\n\nfunction Day(props) {\n  var day = props.day,\n      month = props.month,\n      year = props.year,\n      selected = props.selected,\n      inRange = props.inRange,\n      leftCrop = props.leftCrop,\n      rightCrop = props.rightCrop,\n      onPressDate = props.onPressDate,\n      primaryColor = props.primaryColor,\n      selectColor = props.selectColor,\n      isToday = props.isToday;\n  var theme = useTheme();\n  var onPress = React.useCallback(function () {\n    onPressDate(new Date(year, month, day));\n  }, [onPressDate, year, month, day]);\n  return React.createElement(View, {\n    style: styles.root\n  }, React.createElement(DayRange, {\n    inRange: inRange,\n    leftCrop: leftCrop,\n    rightCrop: rightCrop,\n    selectColor: selectColor\n  }), React.createElement(TouchableRipple, {\n    borderless: true,\n    onPress: onPress,\n    style: [styles.button, {\n      backgroundColor: inRange ? selectColor : theme.colors.surface\n    }]\n  }, React.createElement(View, {\n    style: [styles.day, isToday ? styles.today : null, selected ? {\n      backgroundColor: primaryColor\n    } : null]\n  }, React.createElement(Text, {\n    style: selected ? styles.selectedText : null,\n    selectable: false\n  }, day))));\n}\n\nvar styles = StyleSheet.create({\n  empty: {\n    flex: 1,\n    flexBasis: 0\n  },\n  root: {\n    flexBasis: 0,\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    position: 'relative'\n  },\n  button: {\n    width: daySize,\n    height: daySize,\n    overflow: 'hidden',\n    borderRadius: daySize / 2\n  },\n  day: {\n    flexBasis: 0,\n    flex: 1,\n    borderRadius: daySize / 2,\n    width: daySize,\n    height: daySize,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: 'transparent'\n  },\n  today: {\n    borderColor: '#000'\n  },\n  selectedText: {\n    color: '#fff'\n  }\n});\nexport default React.memo(Day);","map":{"version":3,"sources":["Day.tsx"],"names":["styles","empty","EmptyDay","React","isToday","theme","useTheme","onPress","onPressDate","root","selectColor","backgroundColor","inRange","surface","selected","primaryColor","flex","flexBasis","justifyContent","alignItems","position","button","width","height","overflow","borderRadius","daySize","day","borderWidth","borderColor","today","selectedText","color"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Text, TouchableRipple, useTheme } from 'react-native-paper';\nimport { StyleSheet, View } from 'react-native';\nimport DayRange from './DayRange';\nimport { daySize } from './dateUtils';\n\nfunction EmptyDayPure() {\n  return <View style={styles.empty} />;\n}\nexport const EmptyDay = React.memo(EmptyDayPure);\n\nfunction Day(props: {\n  day: number;\n  month: number;\n  year: number;\n  selected: boolean;\n  inRange: boolean;\n  leftCrop: boolean;\n  rightCrop: boolean;\n  primaryColor: string;\n  selectColor: string;\n  isToday: boolean;\n  onPressDate: (date: Date) => any;\n}) {\n  const {\n    day,\n    month,\n    year,\n    selected,\n    inRange,\n    leftCrop,\n    rightCrop,\n    onPressDate,\n    primaryColor,\n    selectColor,\n    isToday,\n  } = props;\n\n  const theme = useTheme();\n\n  const onPress = React.useCallback(() => {\n    onPressDate(new Date(year, month, day));\n  }, [onPressDate, year, month, day]);\n\n  return (\n    <View style={styles.root}>\n      <DayRange\n        inRange={inRange}\n        leftCrop={leftCrop}\n        rightCrop={rightCrop}\n        selectColor={selectColor}\n      />\n\n      <TouchableRipple\n        borderless={true}\n        onPress={onPress}\n        style={[\n          styles.button,\n          { backgroundColor: inRange ? selectColor : theme.colors.surface },\n          // hovered && styles.buttonHovered,\n        ]}\n      >\n        <View\n          style={[\n            styles.day,\n            isToday ? styles.today : null,\n            selected ? { backgroundColor: primaryColor } : null,\n          ]}\n        >\n          <Text\n            style={selected ? styles.selectedText : null}\n            selectable={false}\n          >\n            {day}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  empty: {\n    flex: 1,\n    flexBasis: 0,\n  },\n  root: {\n    flexBasis: 0,\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    position: 'relative',\n  },\n  button: {\n    width: daySize,\n    height: daySize,\n    overflow: 'hidden',\n    borderRadius: daySize / 2,\n  },\n  day: {\n    flexBasis: 0,\n    flex: 1,\n    borderRadius: daySize / 2,\n    width: daySize,\n    height: daySize,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: 'transparent',\n  },\n  today: {\n    borderColor: '#000',\n  },\n  selectedText: {\n    color: '#fff',\n  },\n});\n\nexport default React.memo(Day);\n"]},"metadata":{},"sourceType":"module"}