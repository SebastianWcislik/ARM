{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Appbar, Button, Text, useTheme } from 'react-native-paper';\nimport TimePicker from \"../Time/TimePicker\";\nimport { clockTypes } from \"../Time/timeUtils\";\nimport Calendar from \"./Calendar\";\nexport function DateTimePickerModal(props) {\n  var theme = useTheme(props.theme);\n  var dimensions = useWindowDimensions();\n  var visible = props.visible,\n      onDismiss = props.onDismiss,\n      onChange = props.onChange,\n      onConfirm = props.onConfirm,\n      date = props.date,\n      label = props.label;\n\n  var _React$useState = React.useState(date),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      localDate = _React$useState2[0],\n      setLocalDate = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isTime = _React$useState4[0],\n      setIsTime = _React$useState4[1];\n\n  var _React$useState5 = React.useState(localDate.getHours()),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      hours = _React$useState6[0],\n      setHours = _React$useState6[1];\n\n  var _React$useState7 = React.useState(localDate.getMinutes()),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      minutes = _React$useState8[0],\n      setMinutes = _React$useState8[1];\n\n  var _React$useState9 = React.useState(0),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      height = _React$useState10[0],\n      setHeight = _React$useState10[1];\n\n  var _React$useState11 = React.useState(0),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      width = _React$useState12[0],\n      setWidth = _React$useState12[1];\n\n  React.useEffect(function () {\n    setLocalDate(date);\n  }, [date]);\n  var onInnerChange = React.useCallback(function (params) {\n    onChange && onChange(params.date);\n    setLocalDate(params.date);\n  }, [onChange]);\n  var onInnerConfirm = React.useCallback(function () {\n    if (isTime) {\n      setIsTime(false);\n      onConfirm(localDate);\n      return;\n    }\n\n    setLocalDate(function (currentDate) {\n      var newDate = new Date(currentDate.getTime());\n      newDate.setHours(hours, minutes);\n      newDate.setMinutes(minutes);\n      return newDate;\n    });\n    setIsTime(true);\n  }, [isTime, onConfirm, localDate, hours, minutes]);\n  var onInnerDismiss = React.useCallback(function () {\n    if (!isTime) {\n      return onDismiss();\n    }\n\n    setIsTime(false);\n  }, [onDismiss, isTime]);\n  var onForcedDismiss = React.useCallback(function () {\n    setIsTime(false);\n    onDismiss();\n  }, [onDismiss]);\n\n  var _React$useState13 = React.useState(clockTypes.hours),\n      _React$useState14 = _slicedToArray(_React$useState13, 2),\n      focused = _React$useState14[0],\n      setFocused = _React$useState14[1];\n\n  var onFocusInput = React.useCallback(function (type) {\n    return setFocused(type);\n  }, []);\n  var onChangeTime = React.useCallback(function (params) {\n    console.log(params);\n\n    if (params.focused) {\n      setFocused(params.focused);\n    }\n\n    setHours(params.hours);\n    setMinutes(params.minutes);\n    setLocalDate(function (currentDate) {\n      var newDate = new Date(currentDate.getTime());\n      newDate.setHours(params.hours, params.minutes);\n      newDate.setMinutes(params.minutes);\n      return newDate;\n    });\n  }, []);\n  return React.createElement(Modal, {\n    animationType: \"slide\",\n    transparent: true,\n    visible: visible,\n    onRequestClose: onForcedDismiss,\n    presentationStyle: \"overFullScreen\",\n    statusBarTranslucent: true\n  }, React.createElement(TouchableWithoutFeedback, {\n    onPress: onForcedDismiss\n  }, React.createElement(View, {\n    style: [StyleSheet.absoluteFill, styles.modalBackground, {\n      backgroundColor: theme.colors.backdrop\n    }]\n  })), React.createElement(View, {\n    style: [StyleSheet.absoluteFill, styles.modalRoot],\n    pointerEvents: \"box-none\"\n  }, React.createElement(View, {\n    style: [styles.modalContent, {\n      backgroundColor: theme.colors.surface\n    }, dimensions.width > 600 ? styles.modalContentBig : null]\n  }, React.createElement(Appbar.Header, {\n    theme: theme\n  }, React.createElement(Appbar.Action, {\n    icon: isTime ? 'arrow-left' : 'close',\n    onPress: onInnerDismiss\n  }), React.createElement(Appbar.Content, {\n    title: label,\n    subtitle: localDate.toLocaleString()\n  }), React.createElement(Appbar.Action, {\n    icon: !isTime ? 'clock' : 'calendar',\n    onPress: function onPress() {\n      return setIsTime(function (prev) {\n        return !prev;\n      });\n    }\n  })), React.createElement(View, {\n    style: styles.labelContainer\n  }, React.createElement(Text, {\n    style: [styles.label, {\n      color: theme.colors.text\n    }]\n  }, isTime ? 'Wybierz czas' : 'Wybierz datę')), isTime ? React.createElement(View, {\n    style: [styles.timepicker, {\n      height: height,\n      width: width\n    }]\n  }, React.createElement(TimePicker, {\n    inputType: \"picker\",\n    focused: focused,\n    hours: hours,\n    minutes: minutes,\n    onChange: onChangeTime,\n    onFocusInput: onFocusInput\n  })) : React.createElement(View, {\n    onLayout: function onLayout(e) {\n      setHeight(e.nativeEvent.layout.height);\n      setWidth(e.nativeEvent.layout.width);\n    },\n    style: styles.datepicker\n  }, React.createElement(Calendar, {\n    mode: \"single\",\n    date: localDate,\n    onChange: onInnerChange,\n    scrollMode: \"horizontal\"\n  })), React.createElement(View, {\n    style: styles.bottom\n  }, React.createElement(Button, {\n    onPress: onInnerDismiss\n  }, isTime ? 'Wybierz datę' : 'Wróć'), React.createElement(Button, {\n    onPress: onInnerConfirm\n  }, isTime ? 'Potwierdź' : 'Wybierz czas')))));\n}\nvar styles = StyleSheet.create({\n  modalRoot: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1\n  },\n  modalBackground: {\n    flex: 1\n  },\n  modalContent: {\n    marginVertical: 50\n  },\n  modalContentBig: {\n    maxWidth: 600,\n    maxHeight: 800,\n    borderRadius: 10,\n    width: '100%',\n    overflow: 'hidden'\n  },\n  labelContainer: {\n    height: 28,\n    justifyContent: 'flex-end',\n    paddingLeft: 24,\n    paddingRight: 24\n  },\n  label: {\n    fontSize: 15,\n    textAlign: 'center'\n  },\n  bottom: {\n    flexDirection: 'row',\n    paddingHorizontal: 8,\n    justifyContent: 'center',\n    marginBottom: 75\n  },\n  timepicker: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  datepicker: {\n    flex: 1\n  }\n});\nexport default React.memo(DateTimePickerModal);","map":{"version":3,"sources":["DateTimePickerModal.tsx"],"names":["theme","useTheme","props","dimensions","useWindowDimensions","label","React","localDate","setLocalDate","onInnerChange","params","onChange","onInnerConfirm","setIsTime","onConfirm","currentDate","newDate","onInnerDismiss","onDismiss","onForcedDismiss","clockTypes","onFocusInput","type","setFocused","onChangeTime","console","setHours","setMinutes","StyleSheet","styles","backgroundColor","backdrop","surface","isTime","prev","labelContainer","color","text","height","width","e","setHeight","setWidth","datepicker","bottom","modalRoot","justifyContent","alignItems","flex","modalBackground","modalContent","marginVertical","modalContentBig","maxWidth","maxHeight","borderRadius","overflow","paddingLeft","paddingRight","fontSize","textAlign","flexDirection","paddingHorizontal","marginBottom","timepicker"],"mappings":";AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;;;AAQA,SAAA,MAAA,EAAA,MAAA,EAAA,IAAA,EAAA,QAAA,QAAA,oBAAA;AACA,OAAA,UAAA;AACA,SAAA,UAAA;AACA,OAAA,QAAA;AAYA,OAAO,SAAA,mBAAA,CAAA,KAAA,EAA8D;AACnE,MAAMA,KAAK,GAAGC,QAAQ,CAACC,KAAK,CAA5B,KAAsB,CAAtB;AACA,MAAMC,UAAU,GAAGC,mBAAnB,EAAA;AACA,MAAM,OAAN,GAHmE,KAGnE,CAAM,OAAN;AAAA,MAAM,SAAN,GAHmE,KAGnE,CAAM,SAAN;AAAA,MAAM,QAAN,GAHmE,KAGnE,CAAM,QAAN;AAAA,MAAM,SAAN,GAHmE,KAGnE,CAAM,SAAN;AAAA,MAAM,IAAN,GAHmE,KAGnE,CAAM,IAAN;AAAA,MAAuDC,KAAvD,GAHmE,KAGnE,CAAuDA,KAAvD;;AAGA,wBAAkCC,KAAK,CAALA,QAAAA,CAAlC,IAAkCA,CAAlC;AAAA;AAAA,MAAM,SAAN;AAAA,MAAM,YAAN;;AACA,yBAA4BA,KAAK,CAALA,QAAAA,CAA5B,KAA4BA,CAA5B;AAAA;AAAA,MAAM,MAAN;AAAA,MAAM,SAAN;;AAEA,yBAA0BA,KAAK,CAALA,QAAAA,CAAuBC,SAAS,CAA1D,QAAiDA,EAAvBD,CAA1B;AAAA;AAAA,MAAM,KAAN;AAAA,MAAM,QAAN;;AACA,yBAA8BA,KAAK,CAALA,QAAAA,CAAuBC,SAAS,CAA9D,UAAqDA,EAAvBD,CAA9B;AAAA;AAAA,MAAM,OAAN;AAAA,MAAM,UAAN;;AAEA,yBAA4BA,KAAK,CAALA,QAAAA,CAA5B,CAA4BA,CAA5B;AAAA;AAAA,MAAM,MAAN;AAAA,MAAM,SAAN;;AACA,0BAA0BA,KAAK,CAALA,QAAAA,CAbyC,CAazCA,CAA1B;AAAA;AAAA,MAAM,KAAN;AAAA,MAAM,QAAN;;AAGAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpBE,IAAAA,YAAY,CAAZA,IAAY,CAAZA;AADFF,GAAAA,EAEG,CAFHA,IAEG,CAFHA;AAIA,MAAMG,aAAa,GAAG,KAAK,CAAL,WAAA,CACnBC,UAAAA,MAAD,EAAY;AACVC,IAAAA,QAAQ,IAAIA,QAAQ,CAACD,MAAM,CAA3BC,IAAoB,CAApBA;AACAH,IAAAA,YAAY,CAACE,MAAM,CAAnBF,IAAY,CAAZA;AAHkB,GAAA,EAKpB,CALF,QAKE,CALoB,CAAtB;AAQA,MAAMI,cAAc,GAAG,KAAK,CAAL,WAAA,CAAkB,YAAM;AAC7C,QAAA,MAAA,EAAY;AACVC,MAAAA,SAAS,CAATA,KAAS,CAATA;AACAC,MAAAA,SAAS,CAATA,SAAS,CAATA;AACA;AACD;;AACDN,IAAAA,YAAY,CAAEO,UAAAA,WAAD,EAAiB;AAC5B,UAAMC,OAAO,GAAG,IAAA,IAAA,CAASD,WAAW,CAApC,OAAyBA,EAAT,CAAhB;AACAC,MAAAA,OAAO,CAAPA,QAAAA,CAAAA,KAAAA,EAAAA,OAAAA;AACAA,MAAAA,OAAO,CAAPA,UAAAA,CAAAA,OAAAA;AACA,aAAA,OAAA;AAJFR,KAAY,CAAZA;AAMAK,IAAAA,SAAS,CAATA,IAAS,CAATA;AAZqB,GAAA,EAapB,CAAA,MAAA,EAAA,SAAA,EAAA,SAAA,EAAA,KAAA,EAbH,OAaG,CAboB,CAAvB;AAeA,MAAMI,cAAc,GAAG,KAAK,CAAL,WAAA,CAAkB,YAAM;AAC7C,QAAI,CAAJ,MAAA,EAAa;AACX,aAAOC,SAAP,EAAA;AACD;;AACDL,IAAAA,SAAS,CAATA,KAAS,CAATA;AAJqB,GAAA,EAKpB,CAAA,SAAA,EALH,MAKG,CALoB,CAAvB;AAOA,MAAMM,eAAe,GAAG,KAAK,CAAL,WAAA,CAAkB,YAAM;AAC9CN,IAAAA,SAAS,CAATA,KAAS,CAATA;AACAK,IAAAA,SAAS;AAFa,GAAA,EAGrB,CAHH,SAGG,CAHqB,CAAxB;;AAKA,0BAA8BZ,KAAK,CAALA,QAAAA,CAC5Bc,UAAU,CADZ,KAA8Bd,CAA9B;AAAA;AAAA,MAAM,OAAN;AAAA,MAAM,UAAN;;AAIA,MAAMe,YAAY,GAAGf,KAAK,CAALA,WAAAA,CAClBgB,UAAAA,IAAD;AAAA,WAA8BC,UAAU,CADrBjB,IACqB,CAAxC;AAAA,GADmBA,EAArB,EAAqBA,CAArB;AAIA,MAAMkB,YAAY,GAAG,KAAK,CAAL,WAAA,CAClBd,UAAAA,MAAD,EAIM;AACJe,IAAAA,OAAO,CAAPA,GAAAA,CAAAA,MAAAA;;AAEA,QAAIf,MAAM,CAAV,OAAA,EAAoB;AAClBa,MAAAA,UAAU,CAACb,MAAM,CAAjBa,OAAU,CAAVA;AACD;;AAEDG,IAAAA,QAAQ,CAAChB,MAAM,CAAfgB,KAAQ,CAARA;AACAC,IAAAA,UAAU,CAACjB,MAAM,CAAjBiB,OAAU,CAAVA;AACAnB,IAAAA,YAAY,CAAEO,UAAAA,WAAD,EAAiB;AAC5B,UAAMC,OAAO,GAAG,IAAA,IAAA,CAASD,WAAW,CAApC,OAAyBA,EAAT,CAAhB;AACAC,MAAAA,OAAO,CAAPA,QAAAA,CAAiBN,MAAM,CAAvBM,KAAAA,EAA+BN,MAAM,CAArCM,OAAAA;AACAA,MAAAA,OAAO,CAAPA,UAAAA,CAAmBN,MAAM,CAAzBM,OAAAA;AACA,aAAA,OAAA;AAJFR,KAAY,CAAZA;AAdiB,GAAA,EAArB,EAAqB,CAArB;AAwBA,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,IAAA,aAAa,EADf,OAAA;AAEE,IAAA,WAAW,EAFb,IAAA;AAGE,IAAA,OAAO,EAHT,OAAA;AAIE,IAAA,cAAc,EAJhB,eAAA;AAKE,IAAA,iBAAiB,EALnB,gBAAA;AAOE,IAAA,oBAAoB,EAAE;AAPxB,GAAA,EASE,KAAA,CAAA,aAAA,CAAA,wBAAA,EAAA;AAA0B,IAAA,OAAO,EAAEW;AAAnC,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,IAAA,KAAK,EAAE,CACLS,UAAU,CADL,YAAA,EAELC,MAAM,CAFD,eAAA,EAGL;AAAEC,MAAAA,eAAe,EAAE9B,KAAK,CAALA,MAAAA,CAAa+B;AAAhC,KAHK;AADT,GAAA,CADF,CATF,EAkBE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,IAAA,KAAK,EAAE,CAACH,UAAU,CAAX,YAAA,EAA0BC,MAAM,CADzC,SACS,CADT;AAEE,IAAA,aAAa,EAAC;AAFhB,GAAA,EAIE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,IAAA,KAAK,EAAE,CACLA,MAAM,CADD,YAAA,EAEL;AAAEC,MAAAA,eAAe,EAAE9B,KAAK,CAALA,MAAAA,CAAagC;AAAhC,KAFK,EAGL7B,UAAU,CAAVA,KAAAA,GAAAA,GAAAA,GAAyB0B,MAAM,CAA/B1B,eAAAA,GAHK,IAAA;AADT,GAAA,EAOE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,MAAA,EAAA;AAAe,IAAA,KAAK,EAAEH;AAAtB,GAAA,EACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,MAAA,EAAA;AACE,IAAA,IAAI,EAAEiC,MAAM,GAAA,YAAA,GADd,OAAA;AAEE,IAAA,OAAO,EAAEhB;AAFX,GAAA,CADF,EAKE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,OAAA,EAAA;AACE,IAAA,KAAK,EADP,KAAA;AAEE,IAAA,QAAQ,EAAEV,SAAS,CAATA,cAAAA;AAFZ,GAAA,CALF,EASE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,MAAA,EAAA;AACE,IAAA,IAAI,EAAE,CAAA,MAAA,GAAA,OAAA,GADR,UAAA;AAEE,IAAA,OAAO,EAAE;AAAA,aAAMM,SAAS,CAAEqB,UAAAA,IAAD;AAAA,eAAU,CAAX,IAAC;AAAA,OAAD,CAAf;AAAA;AAFX,GAAA,CATF,CAPF,EAqBE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,KAAK,EAAEL,MAAM,CAACM;AAApB,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,KAAK,EAAE,CAACN,MAAM,CAAP,KAAA,EAAe;AAAEO,MAAAA,KAAK,EAAEpC,KAAK,CAALA,MAAAA,CAAaqC;AAAtB,KAAf;AAAb,GAAA,EACGJ,MAAM,GAAA,cAAA,GAvBb,cAsBI,CADF,CArBF,EA0BGA,MAAM,GACL,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,KAAK,EAAE,CAACJ,MAAM,CAAP,UAAA,EAAoB;AAAES,MAAAA,MAAF,EAAEA,MAAF;AAAUC,MAAAA,KAAAA,EAAAA;AAAV,KAApB;AAAb,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AACE,IAAA,SAAS,EADX,QAAA;AAEE,IAAA,OAAO,EAFT,OAAA;AAGE,IAAA,KAAK,EAHP,KAAA;AAIE,IAAA,OAAO,EAJT,OAAA;AAKE,IAAA,QAAQ,EALV,YAAA;AAME,IAAA,YAAY,EAAElB;AANhB,GAAA,CADF,CADK,GAYL,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,IAAA,QAAQ,EAAGmB,kBAAAA,CAAD,EAAO;AACfC,MAAAA,SAAS,CAACD,CAAC,CAADA,WAAAA,CAAAA,MAAAA,CAAVC,MAAS,CAATA;AACAC,MAAAA,QAAQ,CAACF,CAAC,CAADA,WAAAA,CAAAA,MAAAA,CAATE,KAAQ,CAARA;AAHJ,KAAA;AAKE,IAAA,KAAK,EAAEb,MAAM,CAACc;AALhB,GAAA,EAOE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AACE,IAAA,IAAI,EADN,QAAA;AAEE,IAAA,IAAI,EAFN,SAAA;AAGE,IAAA,QAAQ,EAHV,aAAA;AAIE,IAAA,UAAU,EAAC;AAJb,GAAA,CAPF,CAtCJ,EAqDE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,KAAK,EAAEd,MAAM,CAACe;AAApB,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAQ,IAAA,OAAO,EAAE3B;AAAjB,GAAA,EACGgB,MAAM,GAAA,cAAA,GAFX,MACE,CADF,EAIE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAQ,IAAA,OAAO,EAAErB;AAAjB,GAAA,EACGqB,MAAM,GAAA,WAAA,GAjFnB,cAgFU,CAJF,CArDF,CAJF,CAlBF,CADF;AAwFD;AAED,IAAMJ,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BgB,EAAAA,SAAS,EAAE;AACTC,IAAAA,cAAc,EADL,QAAA;AAETC,IAAAA,UAAU,EAFD,QAAA;AAGTC,IAAAA,IAAI,EAAE;AAHG,GADoB;AAM/BC,EAAAA,eAAe,EAAE;AACfD,IAAAA,IAAI,EAAE;AADS,GANc;AAS/BE,EAAAA,YAAY,EAAE;AACZC,IAAAA,cAAc,EAAE;AADJ,GATiB;AAY/BC,EAAAA,eAAe,EAAE;AACfC,IAAAA,QAAQ,EADO,GAAA;AAEfC,IAAAA,SAAS,EAFM,GAAA;AAGfC,IAAAA,YAAY,EAHG,EAAA;AAIfhB,IAAAA,KAAK,EAJU,MAAA;AAKfiB,IAAAA,QAAQ,EAAE;AALK,GAZc;AAmB/BrB,EAAAA,cAAc,EAAE;AACdG,IAAAA,MAAM,EADQ,EAAA;AAEdQ,IAAAA,cAAc,EAFA,UAAA;AAGdW,IAAAA,WAAW,EAHG,EAAA;AAIdC,IAAAA,YAAY,EAAE;AAJA,GAnBe;AAyB/BrD,EAAAA,KAAK,EAAE;AACLsD,IAAAA,QAAQ,EADH,EAAA;AAELC,IAAAA,SAAS,EAAE;AAFN,GAzBwB;AA6B/BhB,EAAAA,MAAM,EAAE;AACNiB,IAAAA,aAAa,EADP,KAAA;AAENC,IAAAA,iBAAiB,EAFX,CAAA;AAGNhB,IAAAA,cAAc,EAHR,QAAA;AAINiB,IAAAA,YAAY,EAAE;AAJR,GA7BuB;AAmC/BC,EAAAA,UAAU,EAAE;AACVjB,IAAAA,UAAU,EADA,QAAA;AAEVD,IAAAA,cAAc,EAAE;AAFN,GAnCmB;AAuC/BH,EAAAA,UAAU,EAAE;AACVK,IAAAA,IAAI,EAAE;AADI;AAvCmB,CAAlB,CAAf;AA4CA,eAAe1C,KAAK,CAALA,IAAAA,CAAf,mBAAeA,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  Modal,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  useWindowDimensions,\n  View,\n} from 'react-native';\nimport { Appbar, Button, Text, useTheme } from 'react-native-paper';\nimport TimePicker from '../Time/TimePicker';\nimport { clockTypes, PossibleClockTypes } from '../Time/timeUtils';\nimport Calendar from './Calendar';\n\nexport interface DateTimePickerModalProps {\n  visible: boolean;\n  onDismiss: () => void;\n  onChange?: (date: Date) => void;\n  onConfirm: (date: Date) => void;\n  date: Date;\n  label: string;\n  theme?: ReactNativePaper.Theme;\n}\n\nexport function DateTimePickerModal(props: DateTimePickerModalProps) {\n  const theme = useTheme(props.theme);\n  const dimensions = useWindowDimensions();\n  const { visible, onDismiss, onChange, onConfirm, date, label } = props;\n\n  // use local state to add only onConfirm state changes\n  const [localDate, setLocalDate] = React.useState<Date>(date);\n  const [isTime, setIsTime] = React.useState(false);\n\n  const [hours, setHours] = React.useState<number>(localDate.getHours());\n  const [minutes, setMinutes] = React.useState<number>(localDate.getMinutes());\n\n  const [height, setHeight] = React.useState(0);\n  const [width, setWidth] = React.useState(0);\n\n  // update local state if changed from outside or if modal is opened\n  React.useEffect(() => {\n    setLocalDate(date);\n  }, [date]);\n\n  const onInnerChange = React.useCallback(\n    (params) => {\n      onChange && onChange(params.date);\n      setLocalDate(params.date);\n    },\n    [onChange]\n  );\n\n  const onInnerConfirm = React.useCallback(() => {\n    if (isTime) {\n      setIsTime(false);\n      onConfirm(localDate);\n      return;\n    }\n    setLocalDate((currentDate) => {\n      const newDate = new Date(currentDate.getTime());\n      newDate.setHours(hours, minutes);\n      newDate.setMinutes(minutes);\n      return newDate;\n    });\n    setIsTime(true);\n  }, [isTime, onConfirm, localDate, hours, minutes]);\n\n  const onInnerDismiss = React.useCallback(() => {\n    if (!isTime) {\n      return onDismiss();\n    }\n    setIsTime(false);\n  }, [onDismiss, isTime]);\n\n  const onForcedDismiss = React.useCallback(() => {\n    setIsTime(false);\n    onDismiss();\n  }, [onDismiss]);\n\n  const [focused, setFocused] = React.useState<PossibleClockTypes>(\n    clockTypes.hours\n  );\n\n  const onFocusInput = React.useCallback(\n    (type: PossibleClockTypes) => setFocused(type),\n    []\n  );\n  const onChangeTime = React.useCallback(\n    (params: {\n      focused?: PossibleClockTypes | undefined;\n      hours: number;\n      minutes: number;\n    }) => {\n      console.log(params);\n\n      if (params.focused) {\n        setFocused(params.focused);\n      }\n\n      setHours(params.hours);\n      setMinutes(params.minutes);\n      setLocalDate((currentDate) => {\n        const newDate = new Date(currentDate.getTime());\n        newDate.setHours(params.hours, params.minutes);\n        newDate.setMinutes(params.minutes);\n        return newDate;\n      });\n    },\n    []\n  );\n\n  return (\n    <Modal\n      animationType=\"slide\"\n      transparent={true}\n      visible={visible}\n      onRequestClose={onForcedDismiss}\n      presentationStyle=\"overFullScreen\"\n      // @ts-ignore\n      statusBarTranslucent={true}\n    >\n      <TouchableWithoutFeedback onPress={onForcedDismiss}>\n        <View\n          style={[\n            StyleSheet.absoluteFill,\n            styles.modalBackground,\n            { backgroundColor: theme.colors.backdrop },\n          ]}\n        />\n      </TouchableWithoutFeedback>\n      <View\n        style={[StyleSheet.absoluteFill, styles.modalRoot]}\n        pointerEvents=\"box-none\"\n      >\n        <View\n          style={[\n            styles.modalContent,\n            { backgroundColor: theme.colors.surface },\n            dimensions.width > 600 ? styles.modalContentBig : null,\n          ]}\n        >\n          <Appbar.Header theme={theme}>\n            <Appbar.Action\n              icon={isTime ? 'arrow-left' : 'close'}\n              onPress={onInnerDismiss}\n            />\n            <Appbar.Content\n              title={label}\n              subtitle={localDate.toLocaleString()}\n            />\n            <Appbar.Action\n              icon={!isTime ? 'clock' : 'calendar'}\n              onPress={() => setIsTime((prev) => !prev)}\n            />\n          </Appbar.Header>\n          <View style={styles.labelContainer}>\n            <Text style={[styles.label, { color: theme.colors.text }]}>\n              {isTime ? 'Select Time' : 'Select Date'}\n            </Text>\n          </View>\n          {isTime ? (\n            <View style={[styles.timepicker, { height, width }]}>\n              <TimePicker\n                inputType=\"picker\"\n                focused={focused}\n                hours={hours}\n                minutes={minutes}\n                onChange={onChangeTime}\n                onFocusInput={onFocusInput}\n              />\n            </View>\n          ) : (\n            <View\n              onLayout={(e) => {\n                setHeight(e.nativeEvent.layout.height);\n                setWidth(e.nativeEvent.layout.width);\n              }}\n              style={styles.datepicker}\n            >\n              <Calendar\n                mode=\"single\"\n                date={localDate}\n                onChange={onInnerChange}\n                scrollMode=\"horizontal\"\n              />\n            </View>\n          )}\n          <View style={styles.bottom}>\n            <Button onPress={onInnerDismiss}>\n              {isTime ? 'Pick Date' : 'Cancel'}\n            </Button>\n            <Button onPress={onInnerConfirm}>\n              {isTime ? 'Confirm' : 'Pick Time'}\n            </Button>\n          </View>\n        </View>\n      </View>\n    </Modal>\n  );\n}\n\nconst styles = StyleSheet.create({\n  modalRoot: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1,\n  },\n  modalBackground: {\n    flex: 1,\n  },\n  modalContent: {\n    marginVertical: 50,\n  },\n  modalContentBig: {\n    maxWidth: 600,\n    maxHeight: 800,\n    borderRadius: 10,\n    width: '100%',\n    overflow: 'hidden',\n  },\n  labelContainer: {\n    height: 28,\n    justifyContent: 'flex-end',\n    paddingLeft: 24,\n    paddingRight: 24,\n  },\n  label: {\n    fontSize: 15,\n    textAlign: 'center',\n  },\n  bottom: {\n    flexDirection: 'row',\n    paddingHorizontal: 8,\n    justifyContent: 'center',\n    marginBottom: 75,\n  },\n  timepicker: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  datepicker: {\n    flex: 1,\n  },\n});\n\nexport default React.memo(DateTimePickerModal);\n"]},"metadata":{},"sourceType":"module"}