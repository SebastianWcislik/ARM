{"ast":null,"code":"import * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Text } from 'react-native-paper';\nimport { circleSize } from \"./AnalogClock\";\n\nfunction AnalogClockHours(_ref) {\n  var is24Hour = _ref.is24Hour,\n      hours = _ref.hours;\n  var outerRange = getHourNumbers(false, circleSize, 12);\n  var innerRange = getHourNumbers(true, circleSize, 12);\n  return React.createElement(React.Fragment, null, outerRange.map(function (a, i) {\n    return React.createElement(View, {\n      key: i,\n      pointerEvents: \"none\",\n      style: [styles.outerHourRoot, {\n        top: a[1] || 0,\n        left: a[0] || 0\n      }]\n    }, React.createElement(View, {\n      style: styles.outerHourInner\n    }, React.createElement(Text, {\n      style: hours === i + 1 ? styles.textWhite : null,\n      selectable: false\n    }, i + 1)));\n  }), is24Hour ? innerRange.map(function (a, i) {\n    return React.createElement(View, {\n      key: i,\n      pointerEvents: \"none\",\n      style: [styles.innerHourRoot, {\n        top: a[1] || 0,\n        left: a[0] || 0\n      }]\n    }, React.createElement(View, {\n      style: styles.innerHourInner\n    }, React.createElement(Text, {\n      selectable: false,\n      style: [styles.innerHourText, i + 13 === hours ? styles.textWhite : null]\n    }, i + 13 === 24 ? '00' : i + 13)));\n  }) : null);\n}\n\nvar styles = StyleSheet.create({\n  outerHourRoot: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n    zIndex: 20,\n    width: 50,\n    height: 50,\n    marginLeft: -25,\n    marginTop: -25,\n    borderRadius: 25\n  },\n  outerHourInner: {\n    borderRadius: 25\n  },\n  innerHourRoot: {\n    position: 'absolute',\n    zIndex: 20,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: 40,\n    height: 40,\n    marginLeft: -20,\n    marginTop: -20,\n    borderRadius: 20\n  },\n  innerHourInner: {\n    borderRadius: 20\n  },\n  innerHourText: {\n    fontSize: 13\n  },\n  textWhite: {\n    color: '#fff'\n  }\n});\n\nfunction getHourNumbers(is24Hour, size, count) {\n  var angle = 0;\n  var step = 2 * Math.PI / count;\n  var radius = size / (is24Hour ? 4 : 2.5);\n  angle = -90 * Math.PI / 180 + Math.PI / 6;\n  return Array(12).fill(true).map(function () {\n    var x = Math.round(size / 2 + radius * Math.cos(angle));\n    var y = Math.round(size / 2 + radius * Math.sin(angle));\n    angle += step;\n    return [x, y];\n  });\n}\n\nexport default React.memo(AnalogClockHours);","map":{"version":3,"sources":["AnalogClockHours.tsx"],"names":["hours","outerRange","getHourNumbers","innerRange","styles","top","a","left","outerHourInner","i","is24Hour","innerHourInner","outerHourRoot","position","justifyContent","alignItems","zIndex","width","height","marginLeft","marginTop","borderRadius","innerHourRoot","innerHourText","fontSize","textWhite","color","angle","step","Math","radius","size","x","y","React"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Text } from 'react-native-paper';\nimport { circleSize } from './AnalogClock';\n\nfunction AnalogClockHours({\n  is24Hour,\n  hours,\n}: // onChange,\n{\n  is24Hour: boolean;\n  hours: number;\n  // onChange: (hour: number) => any\n}) {\n  const outerRange = getHourNumbers(false, circleSize, 12);\n  const innerRange = getHourNumbers(true, circleSize, 12);\n  return (\n    <>\n      {outerRange.map((a, i) => (\n        <View\n          key={i}\n          pointerEvents=\"none\"\n          style={[\n            styles.outerHourRoot,\n            {\n              top: a[1] || 0,\n              left: a[0] || 0,\n            },\n          ]}\n        >\n          <View style={styles.outerHourInner}>\n            <Text\n              style={hours === i + 1 ? styles.textWhite : null}\n              selectable={false}\n            >\n              {i + 1}\n            </Text>\n          </View>\n        </View>\n      ))}\n      {is24Hour\n        ? innerRange.map((a, i) => (\n            <View\n              key={i}\n              pointerEvents=\"none\"\n              style={[\n                styles.innerHourRoot,\n                {\n                  top: a[1] || 0,\n                  left: a[0] || 0,\n                },\n              ]}\n            >\n              <View style={styles.innerHourInner}>\n                <Text\n                  selectable={false}\n                  style={[\n                    styles.innerHourText,\n                    i + 13 === hours ? styles.textWhite : null,\n                  ]}\n                >\n                  {i + 13 === 24 ? '00' : i + 13}\n                </Text>\n              </View>\n            </View>\n          ))\n        : null}\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  outerHourRoot: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n    zIndex: 20,\n    width: 50,\n    height: 50,\n    marginLeft: -25,\n    marginTop: -25,\n\n    borderRadius: 25,\n  },\n  outerHourInner: { borderRadius: 25 },\n  innerHourRoot: {\n    position: 'absolute',\n    zIndex: 20,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: 40,\n    height: 40,\n    marginLeft: -20,\n    marginTop: -20,\n    borderRadius: 20,\n  },\n  innerHourInner: { borderRadius: 20 },\n  innerHourText: { fontSize: 13 },\n  textWhite: { color: '#fff' },\n});\n\nfunction getHourNumbers(is24Hour: boolean, size: number, count: number) {\n  let angle = 0;\n  let step = (2 * Math.PI) / count;\n  let radius = size / (is24Hour ? 4 : 2.5);\n\n  angle = (-90 * Math.PI) / 180 + Math.PI / 6;\n\n  return Array(12)\n    .fill(true)\n    .map(() => {\n      let x = Math.round(size / 2 + radius * Math.cos(angle));\n      let y = Math.round(size / 2 + radius * Math.sin(angle));\n      angle += step;\n      return [x, y];\n    });\n}\n\nexport default React.memo(AnalogClockHours);\n"]},"metadata":{},"sourceType":"module"}