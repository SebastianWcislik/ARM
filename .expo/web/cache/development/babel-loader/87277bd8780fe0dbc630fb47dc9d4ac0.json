{"ast":null,"code":"import * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Text } from 'react-native-paper';\nimport { circleSize } from \"./AnalogClock\";\n\nfunction AnalogClockMinutes(_ref) {\n  var minutes = _ref.minutes;\n  var range = getMinuteNumbers(circleSize, 12);\n  return React.createElement(React.Fragment, null, range.map(function (a, i) {\n    var currentMinutes = i * 5;\n    var isZero = currentMinutes === 0;\n    var textColorWhite = currentMinutes - 1 <= minutes && currentMinutes + 1 >= minutes;\n\n    if (isZero) {\n      textColorWhite = minutes >= 59 || currentMinutes + 1 >= minutes;\n    }\n\n    return React.createElement(View, {\n      key: i,\n      pointerEvents: \"none\",\n      style: [styles.outerHourRoot, {\n        top: a[1] || 0,\n        left: a[0] || 0\n      }]\n    }, React.createElement(View, {\n      style: styles.outerHourInner\n    }, React.createElement(Text, {\n      style: textColorWhite ? styles.textWhite : null,\n      selectable: false\n    }, isZero ? '00' : currentMinutes)));\n  }));\n}\n\nvar styles = StyleSheet.create({\n  outerHourRoot: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n    zIndex: 20,\n    width: 50,\n    height: 50,\n    marginLeft: -25,\n    marginTop: -25,\n    borderRadius: 25\n  },\n  outerHourInner: {\n    borderRadius: 25\n  },\n  textWhite: {\n    color: '#fff'\n  }\n});\n\nfunction getMinuteNumbers(size, count) {\n  var angle = 0;\n  var step = 2 * Math.PI / count;\n  var radius = size / 2.5;\n  angle = angle = -90 * Math.PI / 180;\n  return Array(12).fill(true).map(function () {\n    var x = Math.round(size / 2 + radius * Math.cos(angle));\n    var y = Math.round(size / 2 + radius * Math.sin(angle));\n    angle += step;\n    return [x, y];\n  });\n}\n\nexport default React.memo(AnalogClockMinutes);","map":{"version":3,"sources":["AnalogClockMinutes.tsx"],"names":["minutes","range","getMinuteNumbers","currentMinutes","i","isZero","textColorWhite","styles","top","a","left","outerHourInner","outerHourRoot","position","justifyContent","alignItems","zIndex","width","height","marginLeft","marginTop","borderRadius","textWhite","color","angle","step","Math","radius","size","x","y","React"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Text } from 'react-native-paper';\nimport { circleSize } from './AnalogClock';\n\nfunction AnalogClockMinutes({\n  minutes,\n}: // onChange,\n{\n  minutes: number;\n  // onChange: (hour: number) => any\n}) {\n  const range = getMinuteNumbers(circleSize, 12);\n\n  return (\n    <>\n      {range.map((a, i) => {\n        const currentMinutes = i * 5;\n        const isZero = currentMinutes === 0;\n        let textColorWhite =\n          currentMinutes - 1 <= minutes && currentMinutes + 1 >= minutes;\n        if (isZero) {\n          textColorWhite = minutes >= 59 || currentMinutes + 1 >= minutes;\n        }\n        return (\n          <View\n            key={i}\n            pointerEvents=\"none\"\n            style={[\n              styles.outerHourRoot,\n              {\n                top: a[1] || 0,\n                left: a[0] || 0,\n              },\n            ]}\n          >\n            <View style={styles.outerHourInner}>\n              <Text\n                style={textColorWhite ? styles.textWhite : null}\n                selectable={false}\n              >\n                {isZero ? '00' : currentMinutes}\n              </Text>\n            </View>\n          </View>\n        );\n      })}\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  outerHourRoot: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n    zIndex: 20,\n    width: 50,\n    height: 50,\n    marginLeft: -25,\n    marginTop: -25,\n\n    borderRadius: 25,\n  },\n  outerHourInner: { borderRadius: 25 },\n\n  textWhite: { color: '#fff' },\n});\n\nfunction getMinuteNumbers(size: number, count: number) {\n  let angle = 0;\n  let step = (2 * Math.PI) / count;\n  let radius = size / 2.5;\n\n  angle = angle = (-90 * Math.PI) / 180;\n\n  return Array(12)\n    .fill(true)\n    .map(() => {\n      let x = Math.round(size / 2 + radius * Math.cos(angle));\n      let y = Math.round(size / 2 + radius * Math.sin(angle));\n      angle += step;\n      return [x, y];\n    });\n}\n\nexport default React.memo(AnalogClockMinutes);\n"]},"metadata":{},"sourceType":"module"}