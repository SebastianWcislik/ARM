{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from \"react\";\n\nvar mockSuccess = function mockSuccess(value) {\n  return new Promise(function (resolve) {\n    setTimeout(function () {\n      return resolve(value);\n    }, 100);\n  });\n};\n\nvar mockFailure = function mockFailure(value) {\n  return new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      return reject(value);\n    }, 100);\n  });\n};\n\nexport function login(username, password) {\n  var shouldSucceed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  console.log(username, password);\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      resUsername = _useState2[0],\n      setUsername = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      resPassword = _useState4[0],\n      setPassword = _useState4[1];\n\n  fetch(serwerAdress + \"/user?username=\" + username).then(function (response) {\n    return response.json();\n  }).then(function (json) {\n    setPassword(json.Id);\n    setUsername(json.Name);\n  });\n\n  if (!shouldSucceed) {\n    return mockFailure({\n      error: 500,\n      message: \"Nie udało się zalogować, spróbuj ponownie\"\n    });\n  }\n\n  return mockSuccess({\n    auth_token: \"successful_fake_token\"\n  });\n}\nexport var createAccount = function createAccount(email, password) {\n  var shouldSucceed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  console.log(email, password);\n\n  if (!shouldSucceed) {\n    return mockFailure({\n      error: 500,\n      message: \"Something went wrong!\"\n    });\n  }\n\n  return mockSuccess({\n    auth_token: \"successful_fake_token\"\n  });\n};","map":{"version":3,"sources":["F:/VSCode Projects/ARM/API/mock.js"],"names":["useEffect","useState","mockSuccess","value","Promise","resolve","setTimeout","mockFailure","reject","login","username","password","shouldSucceed","console","log","resUsername","setUsername","resPassword","setPassword","fetch","serwerAdress","then","response","json","Id","Name","error","message","auth_token","createAccount","email"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;AAC7B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BC,IAAAA,UAAU,CAAC;AAAA,aAAMD,OAAO,CAACF,KAAD,CAAb;AAAA,KAAD,EAAuB,GAAvB,CAAV;AACD,GAFM,CAAP;AAGD,CAJD;;AAMA,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAACJ,KAAD,EAAW;AAC7B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUG,MAAV,EAAqB;AACtCF,IAAAA,UAAU,CAAC;AAAA,aAAME,MAAM,CAACL,KAAD,CAAZ;AAAA,KAAD,EAAsB,GAAtB,CAAV;AACD,GAFM,CAAP;AAGD,CAJD;;AAMA,OAAO,SAASM,KAAT,CAAeC,QAAf,EAAyBC,QAAzB,EAAyD;AAAA,MAAtBC,aAAsB,uEAAN,IAAM;AAC9DC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ,EAAsBC,QAAtB;;AAD8D,kBAE3BV,QAAQ,CAAC,EAAD,CAFmB;AAAA;AAAA,MAEvDc,WAFuD;AAAA,MAE1CC,WAF0C;;AAAA,mBAG3Bf,QAAQ,CAAC,EAAD,CAHmB;AAAA;AAAA,MAGvDgB,WAHuD;AAAA,MAG1CC,WAH0C;;AAI9DC,EAAAA,KAAK,CAACC,YAAY,GAAG,iBAAf,GAAmCV,QAApC,CAAL,CACGW,IADH,CACQ,UAACC,QAAD;AAAA,WAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,GADR,EAEGF,IAFH,CAEQ,UAACE,IAAD,EAAU;AACdL,IAAAA,WAAW,CAACK,IAAI,CAACC,EAAN,CAAX;AACAR,IAAAA,WAAW,CAACO,IAAI,CAACE,IAAN,CAAX;AACD,GALH;;AAOA,MAAI,CAACb,aAAL,EAAoB;AAClB,WAAOL,WAAW,CAAC;AACjBmB,MAAAA,KAAK,EAAE,GADU;AAEjBC,MAAAA,OAAO,EAAE;AAFQ,KAAD,CAAlB;AAID;;AAED,SAAOzB,WAAW,CAAC;AAAE0B,IAAAA,UAAU,EAAE;AAAd,GAAD,CAAlB;AACD;AAED,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAQnB,QAAR,EAA2C;AAAA,MAAzBC,aAAyB,uEAAT,IAAS;AACtEC,EAAAA,OAAO,CAACC,GAAR,CAAYgB,KAAZ,EAAmBnB,QAAnB;;AAEA,MAAI,CAACC,aAAL,EAAoB;AAClB,WAAOL,WAAW,CAAC;AAAEmB,MAAAA,KAAK,EAAE,GAAT;AAAcC,MAAAA,OAAO,EAAE;AAAvB,KAAD,CAAlB;AACD;;AAED,SAAOzB,WAAW,CAAC;AAAE0B,IAAAA,UAAU,EAAE;AAAd,GAAD,CAAlB;AACD,CARM","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst mockSuccess = (value) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => resolve(value), 100);\r\n  });\r\n};\r\n\r\nconst mockFailure = (value) => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => reject(value), 100);\r\n  });\r\n};\r\n\r\nexport function login(username, password, shouldSucceed = true) {\r\n  console.log(username, password);\r\n  const [resUsername, setUsername] = useState(\"\");\r\n  const [resPassword, setPassword] = useState(\"\");\r\n  fetch(serwerAdress + \"/user?username=\" + username)\r\n    .then((response) => response.json())\r\n    .then((json) => {\r\n      setPassword(json.Id);\r\n      setUsername(json.Name);\r\n    });\r\n\r\n  if (!shouldSucceed) {\r\n    return mockFailure({\r\n      error: 500,\r\n      message: \"Nie udało się zalogować, spróbuj ponownie\",\r\n    });\r\n  }\r\n\r\n  return mockSuccess({ auth_token: \"successful_fake_token\" });\r\n}\r\n\r\nexport const createAccount = (email, password, shouldSucceed = true) => {\r\n  console.log(email, password);\r\n\r\n  if (!shouldSucceed) {\r\n    return mockFailure({ error: 500, message: \"Something went wrong!\" });\r\n  }\r\n\r\n  return mockSuccess({ auth_token: \"successful_fake_token\" });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}