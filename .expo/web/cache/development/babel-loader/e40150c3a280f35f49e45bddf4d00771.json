{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from \"react\";\n\nvar mockSuccess = function mockSuccess(value) {\n  return new Promise(function (resolve) {\n    setTimeout(function () {\n      return resolve(value);\n    }, 100);\n  });\n};\n\nvar mockFailure = function mockFailure(value) {\n  return new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      return reject(value);\n    }, 100);\n  });\n};\n\nexport function login(email, password) {\n  var shouldSucceed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      users = _useState2[0],\n      setUsers = _useState2[1];\n\n  console.log(email, password);\n\n  if (!shouldSucceed) {\n    return mockFailure({\n      error: 500,\n      message: \"Nie udało się zalogować, spróbuj ponownie\"\n    });\n  }\n\n  fetch(\"http://192.168.0.27:3000/users\").then(function (response) {\n    return response.json();\n  }).then(function (json) {\n    return setUsers(json);\n  });\n  return mockSuccess({\n    auth_token: \"successful_fake_token\"\n  });\n}\nexport var createAccount = function createAccount(email, password) {\n  var shouldSucceed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  console.log(email, password);\n\n  if (!shouldSucceed) {\n    return mockFailure({\n      error: 500,\n      message: \"Something went wrong!\"\n    });\n  }\n\n  return mockSuccess({\n    auth_token: \"successful_fake_token\"\n  });\n};","map":{"version":3,"sources":["F:/VSCode Projects/DoneWithIt/API/mock.js"],"names":["useEffect","useState","mockSuccess","value","Promise","resolve","setTimeout","mockFailure","reject","login","email","password","shouldSucceed","users","setUsers","console","log","error","message","fetch","then","response","json","auth_token","createAccount"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;AAC7B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BC,IAAAA,UAAU,CAAC;AAAA,aAAMD,OAAO,CAACF,KAAD,CAAb;AAAA,KAAD,EAAuB,GAAvB,CAAV;AACD,GAFM,CAAP;AAGD,CAJD;;AAMA,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAACJ,KAAD,EAAW;AAC7B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUG,MAAV,EAAqB;AACtCF,IAAAA,UAAU,CAAC;AAAA,aAAME,MAAM,CAACL,KAAD,CAAZ;AAAA,KAAD,EAAsB,GAAtB,CAAV;AACD,GAFM,CAAP;AAGD,CAJD;;AAMA,OAAO,SAASM,KAAT,CAAeC,KAAf,EAAsBC,QAAtB,EAAsD;AAAA,MAAtBC,aAAsB,uEAAN,IAAM;;AAAA,kBACjCX,QAAQ,CAAC,EAAD,CADyB;AAAA;AAAA,MACpDY,KADoD;AAAA,MAC7CC,QAD6C;;AAE3DC,EAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ,EAAmBC,QAAnB;;AACA,MAAI,CAACC,aAAL,EAAoB;AAClB,WAAOL,WAAW,CAAC;AACjBU,MAAAA,KAAK,EAAE,GADU;AAEjBC,MAAAA,OAAO,EAAE;AAFQ,KAAD,CAAlB;AAID;;AACDC,EAAAA,KAAK,CAAC,gCAAD,CAAL,CACGC,IADH,CACQ,UAACC,QAAD;AAAA,WAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,GADR,EAEGF,IAFH,CAEQ,UAACE,IAAD;AAAA,WAAUR,QAAQ,CAACQ,IAAD,CAAlB;AAAA,GAFR;AAIA,SAAOpB,WAAW,CAAC;AAAEqB,IAAAA,UAAU,EAAE;AAAd,GAAD,CAAlB;AACD;AAED,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACd,KAAD,EAAQC,QAAR,EAA2C;AAAA,MAAzBC,aAAyB,uEAAT,IAAS;AACtEG,EAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ,EAAmBC,QAAnB;;AAEA,MAAI,CAACC,aAAL,EAAoB;AAClB,WAAOL,WAAW,CAAC;AAAEU,MAAAA,KAAK,EAAE,GAAT;AAAcC,MAAAA,OAAO,EAAE;AAAvB,KAAD,CAAlB;AACD;;AAED,SAAOhB,WAAW,CAAC;AAAEqB,IAAAA,UAAU,EAAE;AAAd,GAAD,CAAlB;AACD,CARM","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst mockSuccess = (value) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => resolve(value), 100);\r\n  });\r\n};\r\n\r\nconst mockFailure = (value) => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => reject(value), 100);\r\n  });\r\n};\r\n\r\nexport function login(email, password, shouldSucceed = true) {\r\n  const [users, setUsers] = useState([]);\r\n  console.log(email, password);\r\n  if (!shouldSucceed) {\r\n    return mockFailure({\r\n      error: 500,\r\n      message: \"Nie udało się zalogować, spróbuj ponownie\",\r\n    });\r\n  }\r\n  fetch(\"http://192.168.0.27:3000/users\")\r\n    .then((response) => response.json())\r\n    .then((json) => setUsers(json));\r\n\r\n  return mockSuccess({ auth_token: \"successful_fake_token\" });\r\n}\r\n\r\nexport const createAccount = (email, password, shouldSucceed = true) => {\r\n  console.log(email, password);\r\n\r\n  if (!shouldSucceed) {\r\n    return mockFailure({ error: 500, message: \"Something went wrong!\" });\r\n  }\r\n\r\n  return mockSuccess({ auth_token: \"successful_fake_token\" });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}