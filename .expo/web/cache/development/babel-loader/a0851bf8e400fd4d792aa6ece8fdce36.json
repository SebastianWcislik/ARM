{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Color from 'color';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Text, TouchableRipple, useTheme } from 'react-native-paper';\nimport { getHourType, hourTypes, useSwitchColors } from \"./timeUtils\";\nexport default function AmPmSwitcher(_ref) {\n  var hours = _ref.hours,\n      onChange = _ref.onChange;\n  var theme = useTheme();\n  var backgroundColor = useMemo(function () {\n    if (theme.dark) {\n      return Color(theme.colors.surface).lighten(1.2).hex();\n    }\n\n    return Color(theme.colors.surface).darken(0.1).hex();\n  }, [theme]);\n  var hourType = getHourType(hours);\n  var isAM = hourType === hourTypes.am;\n  var isPM = hourType === hourTypes.pm;\n  return React.createElement(View, {\n    style: [styles.root, {\n      borderColor: backgroundColor,\n      borderRadius: theme.roundness\n    }]\n  }, React.createElement(SwitchButton, {\n    label: \"AM\",\n    onPress: isAM ? undefined : function () {\n      return onChange(hours - 12);\n    },\n    selected: isAM,\n    disabled: isAM\n  }), React.createElement(View, {\n    style: [styles.switchSeparator, {\n      backgroundColor: backgroundColor\n    }]\n  }), React.createElement(SwitchButton, {\n    label: \"PM\",\n    onPress: isPM ? undefined : function () {\n      return onChange(hours + 12);\n    },\n    selected: isPM,\n    disabled: isPM\n  }));\n}\n\nfunction SwitchButton(_ref2) {\n  var label = _ref2.label,\n      onPress = _ref2.onPress,\n      selected = _ref2.selected,\n      disabled = _ref2.disabled;\n  var theme = useTheme();\n\n  var _useSwitchColors = useSwitchColors(selected),\n      backgroundColor = _useSwitchColors.backgroundColor,\n      color = _useSwitchColors.color;\n\n  console.log({\n    backgroundColor: backgroundColor,\n    color: color\n  });\n  return React.createElement(TouchableRipple, {\n    onPress: onPress,\n    style: styles.switchButton,\n    accessibilityLabel: label,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      disabled: disabled\n    },\n    disabled: disabled\n  }, React.createElement(View, {\n    style: [styles.switchButtonInner, {\n      backgroundColor: backgroundColor\n    }]\n  }, React.createElement(Text, {\n    selectable: false,\n    style: [_objectSpread(_objectSpread({}, theme.fonts.medium), {}, {\n      color: color\n    })]\n  }, label)));\n}\n\nvar styles = StyleSheet.create({\n  root: {\n    width: 50,\n    height: 80,\n    borderWidth: 1,\n    overflow: 'hidden'\n  },\n  switchSeparator: {\n    height: 1,\n    width: 48\n  },\n  switchButton: {\n    flex: 1\n  },\n  switchButtonInner: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["AmPmSwitcher.tsx"],"names":["onChange","theme","useTheme","backgroundColor","useMemo","Color","hourType","getHourType","isAM","hourTypes","isPM","styles","borderColor","borderRadius","roundness","hours","disabled","color","useSwitchColors","console","root","width","height","borderWidth","overflow","switchSeparator","switchButton","flex","switchButtonInner","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import Color from 'color';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Text, TouchableRipple, useTheme } from 'react-native-paper';\nimport { getHourType, hourTypes, useSwitchColors } from './timeUtils';\n\nexport default function AmPmSwitcher({\n  hours,\n  onChange,\n}: {\n  hours: number;\n  onChange: (hours: number) => any;\n}) {\n  const theme = useTheme();\n  const backgroundColor = useMemo<string>(() => {\n    if (theme.dark) {\n      return Color(theme.colors.surface).lighten(1.2).hex();\n    }\n    return Color(theme.colors.surface).darken(0.1).hex();\n  }, [theme]);\n\n  const hourType = getHourType(hours);\n  const isAM = hourType === hourTypes.am;\n  const isPM = hourType === hourTypes.pm;\n\n  return (\n    <View\n      style={[\n        styles.root,\n        {\n          borderColor: backgroundColor,\n          borderRadius: theme.roundness,\n        },\n      ]}\n    >\n      <SwitchButton\n        label=\"AM\"\n        onPress={isAM ? undefined : () => onChange(hours - 12)}\n        selected={isAM}\n        disabled={isAM}\n      />\n      <View style={[styles.switchSeparator, { backgroundColor }]} />\n      <SwitchButton\n        label=\"PM\"\n        onPress={isPM ? undefined : () => onChange(hours + 12)}\n        selected={isPM}\n        disabled={isPM}\n      />\n    </View>\n  );\n}\n\nfunction SwitchButton({\n  label,\n  onPress,\n  selected,\n  disabled,\n}: {\n  label: string;\n  onPress: (() => any) | undefined;\n  selected: boolean;\n  disabled: boolean;\n}) {\n  const theme = useTheme();\n  const { backgroundColor, color } = useSwitchColors(selected);\n  console.log({ backgroundColor, color });\n  return (\n    <TouchableRipple\n      onPress={onPress}\n      style={styles.switchButton}\n      accessibilityLabel={label}\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"button\"\n      accessibilityState={{ disabled }}\n      disabled={disabled}\n    >\n      <View style={[styles.switchButtonInner, { backgroundColor }]}>\n        <Text\n          selectable={false}\n          style={[\n            {\n              ...theme.fonts.medium,\n              color: color,\n            },\n          ]}\n        >\n          {label}\n        </Text>\n      </View>\n    </TouchableRipple>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    width: 50,\n    height: 80,\n    borderWidth: 1,\n    overflow: 'hidden',\n  },\n  switchSeparator: {\n    height: 1,\n    width: 48,\n  },\n  switchButton: {\n    flex: 1,\n  },\n  switchButtonInner: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}