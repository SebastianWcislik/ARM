{"ast":null,"code":"import { useEffect, useState } from \"react\";\nvar serwerAdress = \"http://192.168.0.27:3000\";\n\nvar mockSuccess = function mockSuccess(value) {\n  return new Promise(function (resolve) {\n    setTimeout(function () {\n      return resolve(value);\n    }, 100);\n  });\n};\n\nvar mockFailure = function mockFailure(value) {\n  return new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      return reject(value);\n    }, 100);\n  });\n};\n\nexport function login(email, password) {\n  var result = fetch(serwerAdress + \"/getPassword?email=\" + '\"' + email + '\"' + \"&password=\" + '\"' + password + '\"').then(function (response) {\n    return response.json();\n  }).then(function (json) {\n    console.log(json);\n  });\n  return result;\n}\nexport function createAccount(email, password) {\n  var shouldSucceed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  console.log(email, password);\n\n  if (!shouldSucceed) {\n    return mockFailure({\n      error: 500,\n      message: \"Something went wrong!\"\n    });\n  }\n\n  return mockSuccess({\n    auth_token: \"successful_fake_token\"\n  });\n}","map":{"version":3,"sources":["F:/VSCode Projects/ARM/API/mock.js"],"names":["useEffect","useState","serwerAdress","mockSuccess","value","Promise","resolve","setTimeout","mockFailure","reject","login","email","password","result","fetch","then","response","json","console","log","createAccount","shouldSucceed","error","message","auth_token"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,IAAMC,YAAY,GAAG,0BAArB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;AAC7B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BC,IAAAA,UAAU,CAAC;AAAA,aAAMD,OAAO,CAACF,KAAD,CAAb;AAAA,KAAD,EAAuB,GAAvB,CAAV;AACD,GAFM,CAAP;AAGD,CAJD;;AAMA,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAACJ,KAAD,EAAW;AAC7B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUG,MAAV,EAAqB;AACtCF,IAAAA,UAAU,CAAC;AAAA,aAAME,MAAM,CAACL,KAAD,CAAZ;AAAA,KAAD,EAAsB,GAAtB,CAAV;AACD,GAFM,CAAP;AAGD,CAJD;;AAMA,OAAO,SAASM,KAAT,CAAeC,KAAf,EAAsBC,QAAtB,EAAgC;AAGrC,MAAIC,MAAM,GAAGC,KAAK,CAChBZ,YAAY,GACV,qBADF,GAEE,GAFF,GAGES,KAHF,GAIE,GAJF,GAKE,YALF,GAME,GANF,GAOEC,QAPF,GAQE,GATc,CAAL,CAWVG,IAXU,CAWL,UAACC,QAAD;AAAA,WAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,GAXK,EAYVF,IAZU,CAYL,UAACE,IAAD,EAAU;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACD,GAdU,CAAb;AAgBA,SAAOJ,MAAP;AACD;AAED,OAAO,SAASO,aAAT,CAAuBT,KAAvB,EAA8BC,QAA9B,EAA8D;AAAA,MAAtBS,aAAsB,uEAAN,IAAM;AACnEH,EAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ,EAAmBC,QAAnB;;AAEA,MAAI,CAACS,aAAL,EAAoB;AAClB,WAAOb,WAAW,CAAC;AAAEc,MAAAA,KAAK,EAAE,GAAT;AAAcC,MAAAA,OAAO,EAAE;AAAvB,KAAD,CAAlB;AACD;;AAED,SAAOpB,WAAW,CAAC;AAAEqB,IAAAA,UAAU,EAAE;AAAd,GAAD,CAAlB;AACD","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst serwerAdress = \"http://192.168.0.27:3000\";\r\n\r\nconst mockSuccess = (value) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => resolve(value), 100);\r\n  });\r\n};\r\n\r\nconst mockFailure = (value) => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => reject(value), 100);\r\n  });\r\n};\r\n\r\nexport function login(email, password) {\r\n  //console.log(username, password, resUser);\r\n  // do zrobienia zamienić na wywoływanie procedury porównującej hasła w bazie\r\n  var result = fetch(\r\n    serwerAdress +\r\n      \"/getPassword?email=\" +\r\n      '\"' +\r\n      email +\r\n      '\"' +\r\n      \"&password=\" +\r\n      '\"' +\r\n      password +\r\n      '\"'\r\n  )\r\n    .then((response) => response.json())\r\n    .then((json) => {\r\n      console.log(json);\r\n    });\r\n\r\n  return result;\r\n}\r\n\r\nexport function createAccount(email, password, shouldSucceed = true) {\r\n  console.log(email, password);\r\n\r\n  if (!shouldSucceed) {\r\n    return mockFailure({ error: 500, message: \"Something went wrong!\" });\r\n  }\r\n\r\n  return mockSuccess({ auth_token: \"successful_fake_token\" });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}