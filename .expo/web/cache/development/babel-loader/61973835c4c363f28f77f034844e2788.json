{"ast":null,"code":"import * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useTheme } from 'react-native-paper';\nimport { useLatest } from \"../utils\";\nimport AmPmSwitcher from \"./AmPmSwitcher\";\nimport TimeInput from \"./TimeInput\";\nimport { clockTypes } from \"./timeUtils\";\n\nfunction TimeInputs(_ref) {\n  var hours = _ref.hours,\n      minutes = _ref.minutes,\n      onFocusInput = _ref.onFocusInput,\n      focused = _ref.focused,\n      inputType = _ref.inputType,\n      onChange = _ref.onChange,\n      is24Hour = _ref.is24Hour;\n  var startInput = React.useRef(null);\n  var endInput = React.useRef(null);\n  var dimensions = useWindowDimensions();\n  var isLandscape = dimensions.width > dimensions.height;\n  var theme = useTheme();\n  var onSubmitStartInput = React.useCallback(function () {\n    if (endInput.current) {\n      endInput.current.focus();\n    }\n  }, [endInput]);\n  var onSubmitEndInput = React.useCallback(function () {}, []);\n  var minutesRef = useLatest(minutes);\n  var onChangeHours = React.useCallback(function (newHours) {\n    onChange({\n      hours: newHours,\n      minutes: minutesRef.current,\n      focused: clockTypes.hours\n    });\n  }, [onChange, minutesRef]);\n  return React.createElement(View, {\n    style: [styles.inputContainer, isLandscape && styles.inputContainerLandscape]\n  }, React.createElement(TimeInput, {\n    ref: startInput,\n    placeholder: '00',\n    value: hours,\n    clockType: clockTypes.hours,\n    pressed: focused === clockTypes.hours,\n    onPress: onFocusInput,\n    inputType: inputType,\n    returnKeyType: 'next',\n    onSubmitEditing: onSubmitStartInput,\n    blurOnSubmit: false,\n    onChanged: function onChanged(newHours) {\n      return onChange({\n        hours: newHours,\n        minutes: minutes\n      });\n    }\n  }), React.createElement(View, {\n    style: styles.hoursAndMinutesSeparator\n  }, React.createElement(View, {\n    style: styles.spaceDot\n  }), React.createElement(View, {\n    style: [styles.dot, {\n      backgroundColor: theme.colors.text\n    }]\n  }), React.createElement(View, {\n    style: styles.betweenDot\n  }), React.createElement(View, {\n    style: [styles.dot, {\n      backgroundColor: theme.colors.text\n    }]\n  }), React.createElement(View, {\n    style: styles.spaceDot\n  })), React.createElement(TimeInput, {\n    ref: endInput,\n    placeholder: '00',\n    value: minutes,\n    clockType: clockTypes.minutes,\n    pressed: focused === clockTypes.minutes,\n    onPress: onFocusInput,\n    inputType: inputType,\n    onSubmitEditing: onSubmitEndInput,\n    onChanged: function onChanged(newMinutes) {\n      return onChange({\n        hours: hours,\n        minutes: newMinutes\n      });\n    }\n  }), !is24Hour && React.createElement(React.Fragment, null, React.createElement(View, {\n    style: styles.spaceBetweenInputsAndSwitcher\n  }), React.createElement(AmPmSwitcher, {\n    hours: hours,\n    onChange: onChangeHours\n  })));\n}\n\nvar styles = StyleSheet.create({\n  spaceBetweenInputsAndSwitcher: {\n    width: 12\n  },\n  inputContainer: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  inputContainerLandscape: {\n    flex: 1\n  },\n  hoursAndMinutesSeparator: {\n    fontSize: 65,\n    width: 24,\n    alignItems: 'center'\n  },\n  spaceDot: {\n    flex: 1\n  },\n  dot: {\n    width: 7,\n    height: 7,\n    borderRadius: 7 / 2\n  },\n  betweenDot: {\n    height: 12\n  }\n});\nexport default React.memo(TimeInputs);","map":{"version":3,"sources":["TimeInputs.tsx"],"names":["is24Hour","startInput","React","endInput","dimensions","useWindowDimensions","isLandscape","theme","useTheme","onSubmitStartInput","onSubmitEndInput","minutesRef","useLatest","onChangeHours","newHours","onChange","hours","minutes","focused","clockTypes","styles","hoursAndMinutesSeparator","spaceDot","backgroundColor","text","betweenDot","newMinutes","spaceBetweenInputsAndSwitcher","width","inputContainer","flexDirection","alignItems","inputContainerLandscape","flex","fontSize","dot","height","borderRadius"],"mappings":"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","sourcesContent":["// @typescript-eslint/no-unused-vars\n// WORK IN PROGRESS\n\nimport * as React from 'react';\nimport {\n  StyleSheet,\n  TextInput as TextInputNative,\n  useWindowDimensions,\n  View,\n} from 'react-native';\nimport { useTheme } from 'react-native-paper';\nimport { useLatest } from '../utils';\nimport AmPmSwitcher from './AmPmSwitcher';\nimport TimeInput from './TimeInput';\nimport {\n  clockTypes,\n  PossibleClockTypes,\n  PossibleInputTypes,\n} from './timeUtils';\n\nfunction TimeInputs({\n  hours,\n  minutes,\n  onFocusInput,\n  focused,\n  inputType,\n  onChange,\n  is24Hour,\n}: {\n  inputType: PossibleInputTypes;\n  focused: PossibleClockTypes;\n  hours: number;\n  minutes: number;\n  onFocusInput: (type: PossibleClockTypes) => any;\n  onChange: ({\n    hours,\n    minutes,\n    focused,\n  }: {\n    hours: number;\n    minutes: number;\n    focused?: undefined | PossibleClockTypes;\n  }) => any;\n  is24Hour: boolean;\n}) {\n  const startInput = React.useRef<TextInputNative | null>(null);\n  const endInput = React.useRef<TextInputNative | null>(null);\n  const dimensions = useWindowDimensions();\n  const isLandscape = dimensions.width > dimensions.height;\n  const theme = useTheme();\n\n  const onSubmitStartInput = React.useCallback(() => {\n    if (endInput.current) {\n      endInput.current.focus();\n    }\n  }, [endInput]);\n\n  const onSubmitEndInput = React.useCallback(() => {\n    // TODO: close modal and persist time\n  }, []);\n\n  const minutesRef = useLatest(minutes);\n  const onChangeHours = React.useCallback(\n    (newHours: number) => {\n      onChange({\n        hours: newHours,\n        minutes: minutesRef.current,\n        focused: clockTypes.hours,\n      });\n    },\n    [onChange, minutesRef]\n  );\n\n  return (\n    <View\n      style={[\n        styles.inputContainer,\n        isLandscape && styles.inputContainerLandscape,\n      ]}\n    >\n      <TimeInput\n        ref={startInput}\n        placeholder={'00'}\n        value={hours}\n        clockType={clockTypes.hours}\n        pressed={focused === clockTypes.hours}\n        onPress={onFocusInput}\n        inputType={inputType}\n        returnKeyType={'next'}\n        onSubmitEditing={onSubmitStartInput}\n        blurOnSubmit={false}\n        onChanged={(newHours) =>\n          onChange({\n            hours: newHours,\n            minutes,\n          })\n        }\n        // onChangeText={onChangeStartInput}\n      />\n      <View style={styles.hoursAndMinutesSeparator}>\n        <View style={styles.spaceDot} />\n        <View style={[styles.dot, { backgroundColor: theme.colors.text }]} />\n        <View style={styles.betweenDot} />\n        <View style={[styles.dot, { backgroundColor: theme.colors.text }]} />\n        <View style={styles.spaceDot} />\n      </View>\n      <TimeInput\n        ref={endInput}\n        placeholder={'00'}\n        value={minutes}\n        clockType={clockTypes.minutes}\n        pressed={focused === clockTypes.minutes}\n        onPress={onFocusInput}\n        inputType={inputType}\n        onSubmitEditing={onSubmitEndInput}\n        onChanged={(newMinutes) =>\n          onChange({\n            hours,\n            minutes: newMinutes,\n          })\n        }\n      />\n      {!is24Hour && (\n        <>\n          <View style={styles.spaceBetweenInputsAndSwitcher} />\n          <AmPmSwitcher hours={hours} onChange={onChangeHours} />\n        </>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  spaceBetweenInputsAndSwitcher: { width: 12 },\n  inputContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  inputContainerLandscape: {\n    flex: 1,\n  },\n  hoursAndMinutesSeparator: {\n    fontSize: 65,\n    width: 24,\n    alignItems: 'center',\n  },\n  spaceDot: {\n    flex: 1,\n  },\n  dot: {\n    width: 7,\n    height: 7,\n    borderRadius: 7 / 2,\n  },\n  betweenDot: {\n    height: 12,\n  },\n});\n\nexport default React.memo(TimeInputs);\n"]},"metadata":{},"sourceType":"module"}