{"ast":null,"code":"var serwerAdress = \"https://arm-dev.herokuapp.com\";\n\nvar mockSuccess = function mockSuccess(value) {\n  return new Promise(function (resolve) {\n    setTimeout(function () {\n      return resolve(value);\n    }, 100);\n  });\n};\n\nvar mockFailure = function mockFailure(value) {\n  return new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      return reject(value);\n    }, 100);\n  });\n};\n\nexport function login(email, password) {\n  var result = fetch(serwerAdress + \"/getPassword/\" + \"'\" + email + \"'\" + \"/\" + \"'\" + password + \"'\").then(function (response) {\n    return response.json();\n  }).then(function (json) {\n    if (json[0].result == 1) return mockSuccess({\n      loggedUser: email,\n      result: json[0],\n      message: \"Success\"\n    });else if (json[0].result == 0) return mockFailure({\n      message: \"Wpisano złe hasło, spróbuj ponownie\"\n    });else return mockFailure({\n      message: \"Błąd serwera\"\n    });\n  });\n  return result;\n}","map":{"version":3,"sources":["F:/VSCodeProjects/ARM/API/mock.js"],"names":["serwerAdress","mockSuccess","value","Promise","resolve","setTimeout","mockFailure","reject","login","email","password","result","fetch","then","response","json","loggedUser","message"],"mappings":"AAAA,IAAMA,YAAY,GAAG,+BAArB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;AAC7B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BC,IAAAA,UAAU,CAAC;AAAA,aAAMD,OAAO,CAACF,KAAD,CAAb;AAAA,KAAD,EAAuB,GAAvB,CAAV;AACD,GAFM,CAAP;AAGD,CAJD;;AAMA,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAACJ,KAAD,EAAW;AAC7B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUG,MAAV,EAAqB;AACtCF,IAAAA,UAAU,CAAC;AAAA,aAAME,MAAM,CAACL,KAAD,CAAZ;AAAA,KAAD,EAAsB,GAAtB,CAAV;AACD,GAFM,CAAP;AAGD,CAJD;;AAMA,OAAO,SAASM,KAAT,CAAeC,KAAf,EAAsBC,QAAtB,EAAgC;AACrC,MAAIC,MAAM,GAAGC,KAAK,CAChBZ,YAAY,GACV,eADF,GAEE,GAFF,GAGES,KAHF,GAIE,GAJF,GAKE,GALF,GAME,GANF,GAOEC,QAPF,GAQE,GATc,CAAL,CAWVG,IAXU,CAWL,UAACC,QAAD;AAAA,WAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,GAXK,EAYVF,IAZU,CAYL,UAACE,IAAD,EAAU;AACd,QAAIA,IAAI,CAAC,CAAD,CAAJ,CAAQJ,MAAR,IAAkB,CAAtB,EACE,OAAOV,WAAW,CAAC;AACjBe,MAAAA,UAAU,EAAEP,KADK;AAEjBE,MAAAA,MAAM,EAAEI,IAAI,CAAC,CAAD,CAFK;AAGjBE,MAAAA,OAAO,EAAE;AAHQ,KAAD,CAAlB,CADF,KAMK,IAAIF,IAAI,CAAC,CAAD,CAAJ,CAAQJ,MAAR,IAAkB,CAAtB,EACH,OAAOL,WAAW,CAAC;AAAEW,MAAAA,OAAO,EAAE;AAAX,KAAD,CAAlB,CADG,KAEA,OAAOX,WAAW,CAAC;AAAEW,MAAAA,OAAO,EAAE;AAAX,KAAD,CAAlB;AACN,GAtBU,CAAb;AAwBA,SAAON,MAAP;AACD","sourcesContent":["const serwerAdress = \"https://arm-dev.herokuapp.com\";\r\n\r\nconst mockSuccess = (value) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => resolve(value), 100);\r\n  });\r\n};\r\n\r\nconst mockFailure = (value) => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => reject(value), 100);\r\n  });\r\n};\r\n\r\nexport function login(email, password) {\r\n  var result = fetch(\r\n    serwerAdress +\r\n      \"/getPassword/\" +\r\n      \"'\" +\r\n      email +\r\n      \"'\" +\r\n      \"/\" +\r\n      \"'\" +\r\n      password +\r\n      \"'\"\r\n  )\r\n    .then((response) => response.json())\r\n    .then((json) => {\r\n      if (json[0].result == 1)\r\n        return mockSuccess({\r\n          loggedUser: email,\r\n          result: json[0],\r\n          message: \"Success\",\r\n        });\r\n      else if (json[0].result == 0)\r\n        return mockFailure({ message: \"Wpisano złe hasło, spróbuj ponownie\" });\r\n      else return mockFailure({ message: \"Błąd serwera\" });\r\n    });\r\n\r\n  return result;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}