{"ast":null,"code":"var mockSuccess = function mockSuccess(value) {\n  return new Promise(function (resolve) {\n    setTimeout(function () {\n      return resolve(value);\n    }, 100);\n  });\n};\n\nvar mockFailure = function mockFailure(value) {\n  return new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      return reject(value);\n    }, 100);\n  });\n};\n\nexport var login = function login(email, password) {\n  var shouldSucceed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  console.log(email, password);\n\n  if (!shouldSucceed) {\n    return mockFailure({\n      error: 500,\n      message: \"Nie udało się zalogować, spróbuj ponownie\"\n    });\n  }\n\n  return mockSuccess({\n    auth_token: \"successful_fake_token\"\n  });\n};\nexport var createAccount = function createAccount(email, password) {\n  var shouldSucceed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  console.log(email, password);\n\n  if (!shouldSucceed) {\n    return mockFailure({\n      error: 500,\n      message: \"Something went wrong!\"\n    });\n  }\n\n  return mockSuccess({\n    auth_token: \"successful_fake_token\"\n  });\n};\n\nvar getAuthenticationToken = function getAuthenticationToken() {\n  return \"successful_fake_token\";\n};\n\nexport var getAllUsersList = function getAllUsersList() {\n  var shouldSucceed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  var token = getAuthenticationToken();\n  var serwerAdress = \"http://192.168.0.27:3000\";\n\n  if (!shouldSucceed) {\n    return mockFailure({\n      error: 401,\n      message: \"Invalid Request\"\n    });\n  }\n\n  return fetch(serwerAdress + \"/users\").then(function (response) {\n    return response.json().then(function (json) {\n      return mockSuccess({\n        json: json\n      });\n    });\n  });\n};","map":{"version":3,"sources":["F:/VSCode Projects/DoneWithIt/API/mock.js"],"names":["mockSuccess","value","Promise","resolve","setTimeout","mockFailure","reject","login","email","password","shouldSucceed","console","log","error","message","auth_token","createAccount","getAuthenticationToken","getAllUsersList","token","serwerAdress","fetch","then","response","json"],"mappings":"AAAA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;AAC7B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BC,IAAAA,UAAU,CAAC;AAAA,aAAMD,OAAO,CAACF,KAAD,CAAb;AAAA,KAAD,EAAuB,GAAvB,CAAV;AACD,GAFM,CAAP;AAGD,CAJD;;AAMA,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAACJ,KAAD,EAAW;AAC7B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUG,MAAV,EAAqB;AACtCF,IAAAA,UAAU,CAAC;AAAA,aAAME,MAAM,CAACL,KAAD,CAAZ;AAAA,KAAD,EAAsB,GAAtB,CAAV;AACD,GAFM,CAAP;AAGD,CAJD;;AAMA,OAAO,IAAMM,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAQC,QAAR,EAA2C;AAAA,MAAzBC,aAAyB,uEAAT,IAAS;AAC9DC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ,EAAmBC,QAAnB;;AAEA,MAAI,CAACC,aAAL,EAAoB;AAClB,WAAOL,WAAW,CAAC;AACjBQ,MAAAA,KAAK,EAAE,GADU;AAEjBC,MAAAA,OAAO,EAAE;AAFQ,KAAD,CAAlB;AAID;;AAED,SAAOd,WAAW,CAAC;AAAEe,IAAAA,UAAU,EAAE;AAAd,GAAD,CAAlB;AACD,CAXM;AAaP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACR,KAAD,EAAQC,QAAR,EAA2C;AAAA,MAAzBC,aAAyB,uEAAT,IAAS;AACtEC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ,EAAmBC,QAAnB;;AAEA,MAAI,CAACC,aAAL,EAAoB;AAClB,WAAOL,WAAW,CAAC;AAAEQ,MAAAA,KAAK,EAAE,GAAT;AAAcC,MAAAA,OAAO,EAAE;AAAvB,KAAD,CAAlB;AACD;;AAED,SAAOd,WAAW,CAAC;AAAEe,IAAAA,UAAU,EAAE;AAAd,GAAD,CAAlB;AACD,CARM;;AAUP,IAAME,sBAAsB,GAAG,SAAzBA,sBAAyB;AAAA,SAAM,uBAAN;AAAA,CAA/B;;AAEA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAA0B;AAAA,MAAzBR,aAAyB,uEAAT,IAAS;AACvD,MAAMS,KAAK,GAAGF,sBAAsB,EAApC;AACA,MAAMG,YAAY,GAAG,0BAArB;;AAEA,MAAI,CAACV,aAAL,EAAoB;AAClB,WAAOL,WAAW,CAAC;AAAEQ,MAAAA,KAAK,EAAE,GAAT;AAAcC,MAAAA,OAAO,EAAE;AAAvB,KAAD,CAAlB;AACD;;AAED,SAAOO,KAAK,CAACD,YAAY,GAAG,QAAhB,CAAL,CAA+BE,IAA/B,CAAoC,UAACC,QAAD;AAAA,WACzCA,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAqB,UAACE,IAAD;AAAA,aACnBxB,WAAW,CAAC;AACVwB,QAAAA,IAAI,EAAJA;AADU,OAAD,CADQ;AAAA,KAArB,CADyC;AAAA,GAApC,CAAP;AAOD,CAfM","sourcesContent":["const mockSuccess = (value) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => resolve(value), 100);\r\n  });\r\n};\r\n\r\nconst mockFailure = (value) => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => reject(value), 100);\r\n  });\r\n};\r\n\r\nexport const login = (email, password, shouldSucceed = true) => {\r\n  console.log(email, password);\r\n\r\n  if (!shouldSucceed) {\r\n    return mockFailure({\r\n      error: 500,\r\n      message: \"Nie udało się zalogować, spróbuj ponownie\",\r\n    });\r\n  }\r\n\r\n  return mockSuccess({ auth_token: \"successful_fake_token\" });\r\n};\r\n\r\nexport const createAccount = (email, password, shouldSucceed = true) => {\r\n  console.log(email, password);\r\n\r\n  if (!shouldSucceed) {\r\n    return mockFailure({ error: 500, message: \"Something went wrong!\" });\r\n  }\r\n\r\n  return mockSuccess({ auth_token: \"successful_fake_token\" });\r\n};\r\n\r\nconst getAuthenticationToken = () => \"successful_fake_token\";\r\n\r\nexport const getAllUsersList = (shouldSucceed = true) => {\r\n  const token = getAuthenticationToken();\r\n  const serwerAdress = \"http://192.168.0.27:3000\";\r\n\r\n  if (!shouldSucceed) {\r\n    return mockFailure({ error: 401, message: \"Invalid Request\" });\r\n  }\r\n\r\n  return fetch(serwerAdress + \"/users\").then((response) =>\r\n    response.json().then((json) =>\r\n      mockSuccess({\r\n        json,\r\n      })\r\n    )\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}