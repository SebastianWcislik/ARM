{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Swiper from \"./Swiper\";\nimport Month from \"./Month\";\nimport { dateToUnix } from \"./dateUtils\";\nimport CalendarHeader from \"./CalendarHeader\";\nimport { useCallback, useMemo } from 'react';\nimport YearPicker from \"./YearPicker\";\nimport Color from 'color';\nimport { useTheme } from 'react-native-paper';\nimport { useLatest } from \"../utils\";\n\nfunction Calendar(props) {\n  var mode = props.mode,\n      onChange = props.onChange,\n      startDate = props.startDate,\n      endDate = props.endDate,\n      date = props.date;\n  var theme = useTheme();\n  var selectColor = useMemo(function () {\n    if (theme.dark) {\n      return Color(theme.colors.primary).hex();\n    }\n\n    return Color(theme.colors.primary).lighten(0.9).hex();\n  }, [theme]);\n  var detectedScrollMode = mode === 'range' ? 'vertical' : 'horizontal';\n  var scrollMode = props.scrollMode ? props.scrollMode : detectedScrollMode;\n\n  var _React$useState = React.useState(undefined),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      selectedYear = _React$useState2[0],\n      setSelectedYear = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      selectingYear = _React$useState4[0],\n      setSelectingYear = _React$useState4[1];\n\n  var onPressYear = useCallback(function (year) {\n    setSelectedYear(year);\n    setSelectingYear(function (prev) {\n      return !prev;\n    });\n  }, [setSelectingYear]);\n  var startDateRef = useLatest(startDate);\n  var endDateRef = useLatest(endDate);\n  var onChangeRef = useLatest(onChange);\n  var onPressDate = useCallback(function (d) {\n    if (mode === 'single') {\n      onChangeRef.current({\n        startDate: undefined,\n        endDate: undefined,\n        date: d\n      });\n    } else if (mode === 'range') {\n      var sd = startDateRef.current;\n      var ed = endDateRef.current;\n      var isStart = true;\n\n      if (sd && !ed && dateToUnix(d) > dateToUnix(sd)) {\n        isStart = false;\n      }\n\n      onChangeRef.current({\n        startDate: isStart ? d : sd,\n        endDate: !isStart ? new Date(d.getFullYear(), d.getMonth(), d.getDate(), 23, 59, 59) : undefined,\n        date: undefined\n      });\n    }\n  }, [mode, onChangeRef, startDateRef, endDateRef]);\n  return React.createElement(View, {\n    style: styles.root\n  }, React.createElement(Swiper, {\n    selectedYear: selectedYear,\n    scrollMode: scrollMode,\n    renderItem: function renderItem(_ref) {\n      var index = _ref.index;\n      return React.createElement(Month, {\n        mode: mode,\n        key: index,\n        index: index,\n        startDate: startDate,\n        endDate: endDate,\n        date: date,\n        onPressYear: onPressYear,\n        selectedYear: selectedYear,\n        selectingYear: selectingYear,\n        onPressDate: onPressDate,\n        scrollMode: scrollMode,\n        primaryColor: theme.colors.primary,\n        selectColor: selectColor,\n        roundness: theme.roundness\n      });\n    },\n    renderHeader: function renderHeader(_ref2) {\n      var onPrev = _ref2.onPrev,\n          onNext = _ref2.onNext;\n      return React.createElement(CalendarHeader, {\n        onPrev: onPrev,\n        onNext: onNext,\n        scrollMode: scrollMode\n      });\n    }\n  }), scrollMode === 'horizontal' ? React.createElement(YearPicker, {\n    selectedYear: selectedYear,\n    selectingYear: selectingYear,\n    onPressYear: onPressYear\n  }) : null);\n}\n\nvar styles = StyleSheet.create({\n  root: {\n    flex: 1\n  }\n});\nexport default React.memo(Calendar);","map":{"version":3,"sources":["Calendar.tsx"],"names":["date","theme","useTheme","selectColor","useMemo","Color","detectedScrollMode","mode","scrollMode","props","React","onPressYear","useCallback","year","setSelectedYear","setSelectingYear","prev","startDateRef","useLatest","endDateRef","onChangeRef","onPressDate","d","startDate","endDate","sd","ed","isStart","dateToUnix","undefined","styles","root","index","roundness","onNext","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\n\nimport Swiper from './Swiper';\n\nimport Month from './Month';\nimport { dateToUnix } from './dateUtils';\n\nimport CalendarHeader from './CalendarHeader';\nimport { useCallback, useMemo } from 'react';\nimport YearPicker from './YearPicker';\nimport Color from 'color';\nimport { useTheme } from 'react-native-paper';\nimport { useLatest } from '../utils';\n\nexport type ModeType = 'single' | 'range';\n\nexport type ScrollModeType = 'horizontal' | 'vertical';\n\nexport type BaseCalendarProps = {\n  scrollMode?: ScrollModeType;\n};\n\nexport type CalendarDate = Date | undefined;\n\nexport type RangeChange = (params: {\n  startDate: CalendarDate;\n  endDate: CalendarDate;\n}) => any;\n\nexport type SingleChange = (params: { date: CalendarDate }) => any;\n\nexport interface CalendarRangeProps extends BaseCalendarProps {\n  mode: 'range';\n  startDate: CalendarDate;\n  endDate: CalendarDate;\n  onChange: RangeChange;\n}\n\nexport interface CalendarSingleProps extends BaseCalendarProps {\n  mode: 'single';\n  date?: CalendarDate;\n  onChange: SingleChange;\n}\n\nfunction Calendar(props: CalendarSingleProps | CalendarRangeProps) {\n  const {\n    mode,\n    onChange,\n    // @ts-ignore\n    startDate,\n    // @ts-ignore\n    endDate,\n    // @ts-ignore\n    date,\n  } = props;\n\n  const theme = useTheme();\n\n  const selectColor = useMemo<string>(() => {\n    if (theme.dark) {\n      return Color(theme.colors.primary).hex();\n    }\n    return Color(theme.colors.primary).lighten(0.9).hex();\n  }, [theme]);\n\n  const detectedScrollMode = mode === 'range' ? 'vertical' : 'horizontal';\n  const scrollMode = props.scrollMode ? props.scrollMode : detectedScrollMode;\n\n  const [selectedYear, setSelectedYear] = React.useState<number | undefined>(\n    undefined\n  );\n  const [selectingYear, setSelectingYear] = React.useState<boolean>(false);\n  const onPressYear = useCallback(\n    (year: number) => {\n      setSelectedYear(year);\n      setSelectingYear((prev) => !prev);\n    },\n    [setSelectingYear]\n  );\n\n  // prevent re-rendering all months when something changed we only need the\n  // latest version of the props and we don't want the useCallback to change\n  const startDateRef = useLatest<CalendarDate>(startDate);\n  const endDateRef = useLatest<CalendarDate>(endDate);\n  const onChangeRef = useLatest<RangeChange | SingleChange>(onChange);\n\n  const onPressDate = useCallback(\n    (d: Date) => {\n      if (mode === 'single') {\n        onChangeRef.current({\n          startDate: undefined,\n          endDate: undefined,\n          date: d,\n        });\n      } else if (mode === 'range') {\n        const sd = startDateRef.current;\n        const ed = endDateRef.current;\n        let isStart: boolean = true;\n        if (sd && !ed && dateToUnix(d) > dateToUnix(sd!)) {\n          isStart = false;\n        }\n        onChangeRef.current({\n          startDate: isStart ? d : sd,\n          endDate: !isStart\n            ? new Date(d.getFullYear(), d.getMonth(), d.getDate(), 23, 59, 59)\n            : undefined,\n          date: undefined,\n        });\n      }\n    },\n    [mode, onChangeRef, startDateRef, endDateRef]\n  );\n\n  return (\n    <View style={styles.root}>\n      <Swiper\n        selectedYear={selectedYear}\n        scrollMode={scrollMode}\n        renderItem={({ index }) => {\n          return (\n            <Month\n              mode={mode}\n              key={index}\n              index={index}\n              startDate={startDate}\n              endDate={endDate}\n              date={date}\n              onPressYear={onPressYear}\n              selectedYear={selectedYear}\n              selectingYear={selectingYear}\n              onPressDate={onPressDate}\n              scrollMode={scrollMode}\n              primaryColor={theme.colors.primary}\n              selectColor={selectColor}\n              roundness={theme.roundness}\n            />\n          );\n        }}\n        renderHeader={({ onPrev, onNext }) => (\n          <CalendarHeader\n            onPrev={onPrev}\n            onNext={onNext}\n            scrollMode={scrollMode}\n          />\n        )}\n      />\n      {scrollMode === 'horizontal' ? (\n        <YearPicker\n          selectedYear={selectedYear}\n          selectingYear={selectingYear}\n          onPressYear={onPressYear}\n        />\n      ) : null}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: { flex: 1 },\n});\n\nexport default React.memo(Calendar);\n"]},"metadata":{},"sourceType":"module"}