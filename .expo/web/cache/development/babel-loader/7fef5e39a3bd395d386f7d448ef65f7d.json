{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { VariableSizeList as List } from 'react-window';\nimport { useCallback, useState } from 'react';\nimport { getMonthHeight, getMonthsOffset } from \"./Month\";\nimport { dayNamesHeight } from \"./DayNames\";\nimport { allMonthsArray, startAtIndex } from \"./dateUtils\";\n\nfunction Swiper(_ref) {\n  var scrollMode = _ref.scrollMode,\n      renderItem = _ref.renderItem,\n      renderHeader = _ref.renderHeader,\n      renderFooter = _ref.renderFooter;\n  var isHorizontal = scrollMode === 'horizontal';\n  var swiper = React.useRef(null);\n\n  var _useState = useState(startAtIndex),\n      _useState2 = _slicedToArray(_useState, 2),\n      index = _useState2[0],\n      setIndex = _useState2[1];\n\n  var onPrev = useCallback(function () {\n    setIndex(function (prev) {\n      return prev - 1;\n    });\n  }, [setIndex]);\n  var onNext = useCallback(function () {\n    setIndex(function (prev) {\n      return prev + 1;\n    });\n  }, [setIndex]);\n  var renderProps = {\n    index: 0,\n    onPrev: onPrev,\n    onNext: onNext\n  };\n\n  var Row = function Row(rowProps) {\n    return React.createElement(View, {\n      style: rowProps.style\n    }, renderItem({\n      index: rowProps.index,\n      onPrev: onPrev,\n      onNext: onNext\n    }));\n  };\n\n  var getItemSize = function getItemSize(idx) {\n    return getMonthHeight(scrollMode, idx);\n  };\n\n  return React.createElement(React.Fragment, null, renderHeader && renderHeader(renderProps), isHorizontal ? React.createElement(View, {\n    style: styles.flex1\n  }, renderItem({\n    index: index,\n    onPrev: onPrev,\n    onNext: onNext\n  })) : React.createElement(AutoSizer, null, function (_ref2) {\n    var height = _ref2.height,\n        width = _ref2.width;\n    return React.createElement(List, {\n      ref: swiper,\n      height: height,\n      itemCount: allMonthsArray.length,\n      itemSize: getItemSize,\n      layout: scrollMode,\n      width: width,\n      initialScrollOffset: getMonthsOffset(scrollMode, index) - dayNamesHeight\n    }, Row);\n  }), renderFooter && renderFooter(renderProps));\n}\n\nfunction AutoSizer(_ref3) {\n  var children = _ref3.children;\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      layout = _React$useState2[0],\n      setLayout = _React$useState2[1];\n\n  var onLayout = useCallback(function (event) {\n    var nl = event.nativeEvent.layout;\n\n    if (!layout || layout.width !== nl.width || layout.height !== nl.height) {\n      setLayout({\n        width: nl.width,\n        height: nl.height\n      });\n    }\n  }, [layout, setLayout]);\n  return React.createElement(View, {\n    style: styles.autoSizer,\n    onLayout: onLayout\n  }, layout ? children(layout) : null);\n}\n\nvar styles = StyleSheet.create({\n  flex1: {\n    flex: 1\n  },\n  autoSizer: {\n    flex: 1\n  }\n});\nexport default React.memo(Swiper);","map":{"version":3,"sources":["Swiper.web.tsx"],"names":["VariableSizeList","renderFooter","isHorizontal","scrollMode","swiper","React","useState","onPrev","useCallback","setIndex","prev","onNext","renderProps","index","Row","rowProps","style","renderItem","getItemSize","idx","getMonthHeight","renderHeader","styles","flex1","width","allMonthsArray","getMonthsOffset","dayNamesHeight","children","onLayout","event","nl","layout","setLayout","height","flex","autoSizer"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { VariableSizeList as List } from 'react-window';\n\nimport { useCallback, useState } from 'react';\nimport { getMonthHeight, getMonthsOffset } from './Month';\nimport { dayNamesHeight } from './DayNames';\nimport { allMonthsArray, startAtIndex } from './dateUtils';\n\ntype RenderProps = {\n  index: number;\n  onNext: () => any;\n  onPrev: () => any;\n};\n\nfunction Swiper({\n  scrollMode,\n  renderItem,\n  renderHeader,\n  renderFooter,\n}: {\n  scrollMode: 'horizontal' | 'vertical';\n  renderItem: (renderProps: RenderProps) => any;\n  renderHeader?: (renderProps: RenderProps) => any;\n  renderFooter?: (renderProps: RenderProps) => any;\n}) {\n  const isHorizontal = scrollMode === 'horizontal';\n  const swiper = React.useRef<List | null>(null);\n\n  const [index, setIndex] = useState(startAtIndex);\n\n  const onPrev = useCallback(() => {\n    setIndex((prev) => prev - 1);\n  }, [setIndex]);\n\n  const onNext = useCallback(() => {\n    setIndex((prev) => prev + 1);\n  }, [setIndex]);\n\n  const renderProps = {\n    index: 0,\n    onPrev,\n    onNext,\n  };\n\n  const Row = (rowProps: any) => (\n    <View style={rowProps.style}>\n      {renderItem({ index: rowProps.index, onPrev, onNext })}\n    </View>\n  );\n\n  const getItemSize = (idx: number): number => getMonthHeight(scrollMode, idx);\n\n  return (\n    <>\n      {renderHeader && renderHeader(renderProps)}\n      {isHorizontal ? (\n        <View style={styles.flex1}>\n          {renderItem({ index, onPrev, onNext })}\n        </View>\n      ) : (\n        <AutoSizer>\n          {({ height, width }) => (\n            <List\n              ref={swiper}\n              height={height}\n              itemCount={allMonthsArray.length}\n              //@ts-ignore\n              itemSize={getItemSize}\n              layout={scrollMode}\n              width={width}\n              initialScrollOffset={\n                getMonthsOffset(scrollMode, index) - dayNamesHeight\n              }\n            >\n              {Row}\n            </List>\n          )}\n        </AutoSizer>\n      )}\n\n      {renderFooter && renderFooter(renderProps)}\n    </>\n  );\n}\n\ntype WidthAndHeight = {\n  width: number;\n  height: number;\n};\n\nfunction AutoSizer({\n  children,\n}: {\n  children: ({ width, height }: WidthAndHeight) => any;\n}) {\n  const [layout, setLayout] = React.useState<WidthAndHeight | null>(null);\n  const onLayout = useCallback(\n    (event: any) => {\n      const nl = event.nativeEvent.layout;\n\n      // https://github.com/necolas/react-native-web/issues/1704\n      if (!layout || layout.width !== nl.width || layout.height !== nl.height) {\n        setLayout({ width: nl.width, height: nl.height });\n      }\n    },\n    [layout, setLayout]\n  );\n  return (\n    <View style={styles.autoSizer} onLayout={onLayout}>\n      {layout ? children(layout) : null}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  flex1: {\n    flex: 1,\n  },\n  autoSizer: {\n    flex: 1,\n  },\n});\n\nexport default React.memo(Swiper);\n"]},"metadata":{},"sourceType":"module"}