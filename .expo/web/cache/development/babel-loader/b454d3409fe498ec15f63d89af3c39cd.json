{"ast":null,"code":"import * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { daySize } from \"./dateUtils\";\n\nfunction DayRange(_ref) {\n  var leftCrop = _ref.leftCrop,\n      rightCrop = _ref.rightCrop,\n      inRange = _ref.inRange,\n      selectColor = _ref.selectColor;\n  var isCrop = inRange && (leftCrop || rightCrop);\n\n  if (inRange || isCrop) {\n    return React.createElement(View, {\n      pointerEvents: \"none\",\n      style: [StyleSheet.absoluteFill, styles.rangeRoot, inRange && !isCrop ? {\n        backgroundColor: selectColor\n      } : null]\n    }, isCrop && React.createElement(React.Fragment, null, React.createElement(View, {\n      style: [styles.flex1, rightCrop ? {\n        backgroundColor: selectColor\n      } : null]\n    }), React.createElement(View, {\n      style: [{\n        backgroundColor: selectColor,\n        minWidth: daySize,\n        minHeight: daySize\n      }, leftCrop ? styles.leftRadius : null, rightCrop ? styles.rightRadius : null]\n    }), React.createElement(View, {\n      style: [styles.flex1, leftCrop ? {\n        backgroundColor: selectColor\n      } : null]\n    })));\n  }\n\n  return null;\n}\n\nvar styles = StyleSheet.create({\n  leftRadius: {\n    borderBottomLeftRadius: daySize / 2,\n    borderTopLeftRadius: daySize / 2\n  },\n  rightRadius: {\n    borderBottomRightRadius: daySize / 2,\n    borderTopRightRadius: daySize / 2\n  },\n  flex1: {\n    flex: 1\n  },\n  rangeRoot: {\n    flexDirection: 'row'\n  }\n});\nexport default React.memo(DayRange);","map":{"version":3,"sources":["DayRange.tsx"],"names":["selectColor","isCrop","inRange","leftCrop","StyleSheet","styles","backgroundColor","rightCrop","minWidth","minHeight","daySize","leftRadius","borderBottomLeftRadius","borderTopLeftRadius","rightRadius","borderBottomRightRadius","borderTopRightRadius","flex1","flex","rangeRoot","flexDirection","React"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AAEA,SAAA,OAAA;;AAEA,SAAA,QAAA,OAUG;AAAA,MAVe,QAUf,QAVe,QAUf;AAAA,MAVe,SAUf,QAVe,SAUf;AAAA,MAVe,OAUf,QAVe,OAUf;AAAA,MANDA,WAMC,QANDA,WAMC;AACD,MAAMC,MAAM,GAAGC,OAAO,KAAKC,QAAQ,IAAnC,SAAsB,CAAtB;;AACA,MAAID,OAAO,IAAX,MAAA,EAAuB;AACrB,WACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,MAAA,aAAa,EADf,MAAA;AAEE,MAAA,KAAK,EAAE,CACLE,UAAU,CADL,YAAA,EAELC,MAAM,CAFD,SAAA,EAGL,OAAO,IAAI,CAAX,MAAA,GACI;AACEC,QAAAA,eAAe,EAAEN;AADnB,OADJ,GAHK,IAAA;AAFT,KAAA,EAYGC,MAAM,IACL,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,MAAA,KAAK,EAAE,CACLI,MAAM,CADD,KAAA,EAELE,SAAS,GACL;AACED,QAAAA,eAAe,EAAEN;AADnB,OADK,GAFJ,IAAA;AADT,KAAA,CADF,EAWE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,MAAA,KAAK,EAAE,CACL;AACEM,QAAAA,eAAe,EADjB,WAAA;AAEEE,QAAAA,QAAQ,EAFV,OAAA;AAGEC,QAAAA,SAAS,EAAEC;AAHb,OADK,EAMLP,QAAQ,GAAGE,MAAM,CAAT,UAAA,GANH,IAAA,EAOLE,SAAS,GAAGF,MAAM,CAAT,WAAA,GAPJ,IAAA;AADT,KAAA,CAXF,EAsBE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,MAAA,KAAK,EAAE,CACLA,MAAM,CADD,KAAA,EAELF,QAAQ,GACJ;AACEG,QAAAA,eAAe,EAAEN;AADnB,OADI,GAFH,IAAA;AADT,KAAA,CAtBF,CAbJ,CADF;AAkDD;;AACD,SAAA,IAAA;AACD;;AAED,IAAMK,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BM,EAAAA,UAAU,EAAE;AACVC,IAAAA,sBAAsB,EAAEF,OAAO,GADrB,CAAA;AAEVG,IAAAA,mBAAmB,EAAEH,OAAO,GAAG;AAFrB,GADmB;AAK/BI,EAAAA,WAAW,EAAE;AACXC,IAAAA,uBAAuB,EAAEL,OAAO,GADrB,CAAA;AAEXM,IAAAA,oBAAoB,EAAEN,OAAO,GAAG;AAFrB,GALkB;AAS/BO,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EAAE;AADD,GATwB;AAY/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,aAAa,EAAE;AADN;AAZoB,CAAlB,CAAf;AAiBA,eAAeC,KAAK,CAALA,IAAAA,CAAf,QAAeA,CAAf","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { daySize } from './dateUtils';\n\nfunction DayRange({\n  leftCrop,\n  rightCrop,\n  inRange,\n  selectColor,\n}: {\n  leftCrop: boolean;\n  rightCrop: boolean;\n  inRange: boolean;\n  selectColor: string;\n}) {\n  const isCrop = inRange && (leftCrop || rightCrop);\n  if (inRange || isCrop) {\n    return (\n      <View\n        pointerEvents=\"none\"\n        style={[\n          StyleSheet.absoluteFill,\n          styles.rangeRoot,\n          inRange && !isCrop\n            ? {\n                backgroundColor: selectColor,\n              }\n            : null,\n        ]}\n      >\n        {isCrop && (\n          <>\n            <View\n              style={[\n                styles.flex1,\n                rightCrop\n                  ? {\n                      backgroundColor: selectColor,\n                    }\n                  : null,\n              ]}\n            />\n            <View\n              style={[\n                {\n                  backgroundColor: selectColor,\n                  minWidth: daySize,\n                  minHeight: daySize,\n                },\n                leftCrop ? styles.leftRadius : null,\n                rightCrop ? styles.rightRadius : null,\n              ]}\n            />\n            <View\n              style={[\n                styles.flex1,\n                leftCrop\n                  ? {\n                      backgroundColor: selectColor,\n                    }\n                  : null,\n              ]}\n            />\n          </>\n        )}\n      </View>\n    );\n  }\n  return null;\n}\n\nconst styles = StyleSheet.create({\n  leftRadius: {\n    borderBottomLeftRadius: daySize / 2,\n    borderTopLeftRadius: daySize / 2,\n  },\n  rightRadius: {\n    borderBottomRightRadius: daySize / 2,\n    borderTopRightRadius: daySize / 2,\n  },\n  flex1: {\n    flex: 1,\n  },\n  rangeRoot: {\n    flexDirection: 'row',\n  },\n});\n\nexport default React.memo(DayRange);\n"]},"metadata":{},"sourceType":"module"}