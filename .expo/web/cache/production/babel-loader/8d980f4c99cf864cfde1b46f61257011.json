{"ast":null,"code":"import{useEffect,useState}from\"react\";var serwerAdress=\"http://192.168.0.27:3000\";var mockSuccess=function mockSuccess(value){return new Promise(function(resolve){setTimeout(function(){return resolve(value);},100);});};var mockFailure=function mockFailure(value){return new Promise(function(resolve,reject){setTimeout(function(){return reject(value);},100);});};export function login(email,password){var result=fetch(serwerAdress+\"/getPassword?email=\"+'\"'+email+'\"'+\"&password=\"+'\"'+password+'\"').then(function(response){return response.json();}).then(function(json){if(json[0].result==1)return mockSuccess({loggedUser:email,result:json[0],message:\"Success\"});else if(json[0].result==0)return mockFailure({message:\"Wpisano złe hasło, spróbuj ponownie\"});else return mockFailure({message:\"Błąd serwera\"});});return result;}export function createAccount(email,password){var shouldSucceed=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;console.log(email,password);if(!shouldSucceed){return mockFailure({error:500,message:\"Something went wrong!\"});}return mockSuccess({auth_token:\"successful_fake_token\"});}","map":{"version":3,"sources":["F:/VSCodeProjects/ARM/API/mock.js"],"names":["useEffect","useState","serwerAdress","mockSuccess","value","Promise","resolve","setTimeout","mockFailure","reject","login","email","password","result","fetch","then","response","json","loggedUser","message","createAccount","shouldSucceed","console","log","error","auth_token"],"mappings":"AAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CAEA,GAAMC,CAAAA,YAAY,CAAG,0BAArB,CAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAW,CAC7B,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAa,CAC9BC,UAAU,CAAC,iBAAMD,CAAAA,OAAO,CAACF,KAAD,CAAb,EAAD,CAAuB,GAAvB,CAAV,CACD,CAFM,CAAP,CAGD,CAJD,CAMA,GAAMI,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACJ,KAAD,CAAW,CAC7B,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUG,MAAV,CAAqB,CACtCF,UAAU,CAAC,iBAAME,CAAAA,MAAM,CAACL,KAAD,CAAZ,EAAD,CAAsB,GAAtB,CAAV,CACD,CAFM,CAAP,CAGD,CAJD,CAMA,MAAO,SAASM,CAAAA,KAAT,CAAeC,KAAf,CAAsBC,QAAtB,CAAgC,CACrC,GAAIC,CAAAA,MAAM,CAAGC,KAAK,CAChBZ,YAAY,CACV,qBADF,CAEE,GAFF,CAGES,KAHF,CAIE,GAJF,CAKE,YALF,CAME,GANF,CAOEC,QAPF,CAQE,GATc,CAAL,CAWVG,IAXU,CAWL,SAACC,QAAD,QAAcA,CAAAA,QAAQ,CAACC,IAAT,EAAd,EAXK,EAYVF,IAZU,CAYL,SAACE,IAAD,CAAU,CACd,GAAIA,IAAI,CAAC,CAAD,CAAJ,CAAQJ,MAAR,EAAkB,CAAtB,CACE,MAAOV,CAAAA,WAAW,CAAC,CACjBe,UAAU,CAAEP,KADK,CAEjBE,MAAM,CAAEI,IAAI,CAAC,CAAD,CAFK,CAGjBE,OAAO,CAAE,SAHQ,CAAD,CAAlB,CADF,IAMK,IAAIF,IAAI,CAAC,CAAD,CAAJ,CAAQJ,MAAR,EAAkB,CAAtB,CACH,MAAOL,CAAAA,WAAW,CAAC,CAAEW,OAAO,CAAE,qCAAX,CAAD,CAAlB,CADG,IAEA,OAAOX,CAAAA,WAAW,CAAC,CAAEW,OAAO,CAAE,cAAX,CAAD,CAAlB,CACN,CAtBU,CAAb,CAwBA,MAAON,CAAAA,MAAP,CACD,CAED,MAAO,SAASO,CAAAA,aAAT,CAAuBT,KAAvB,CAA8BC,QAA9B,CAA8D,IAAtBS,CAAAA,aAAsB,2DAAN,IAAM,CACnEC,OAAO,CAACC,GAAR,CAAYZ,KAAZ,CAAmBC,QAAnB,EAEA,GAAI,CAACS,aAAL,CAAoB,CAClB,MAAOb,CAAAA,WAAW,CAAC,CAAEgB,KAAK,CAAE,GAAT,CAAcL,OAAO,CAAE,uBAAvB,CAAD,CAAlB,CACD,CAED,MAAOhB,CAAAA,WAAW,CAAC,CAAEsB,UAAU,CAAE,uBAAd,CAAD,CAAlB,CACD","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst serwerAdress = \"http://192.168.0.27:3000\";\r\n\r\nconst mockSuccess = (value) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => resolve(value), 100);\r\n  });\r\n};\r\n\r\nconst mockFailure = (value) => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => reject(value), 100);\r\n  });\r\n};\r\n\r\nexport function login(email, password) {\r\n  var result = fetch(\r\n    serwerAdress +\r\n      \"/getPassword?email=\" +\r\n      '\"' +\r\n      email +\r\n      '\"' +\r\n      \"&password=\" +\r\n      '\"' +\r\n      password +\r\n      '\"'\r\n  )\r\n    .then((response) => response.json())\r\n    .then((json) => {\r\n      if (json[0].result == 1)\r\n        return mockSuccess({\r\n          loggedUser: email,\r\n          result: json[0],\r\n          message: \"Success\",\r\n        });\r\n      else if (json[0].result == 0)\r\n        return mockFailure({ message: \"Wpisano złe hasło, spróbuj ponownie\" });\r\n      else return mockFailure({ message: \"Błąd serwera\" });\r\n    });\r\n\r\n  return result;\r\n}\r\n\r\nexport function createAccount(email, password, shouldSucceed = true) {\r\n  console.log(email, password);\r\n\r\n  if (!shouldSucceed) {\r\n    return mockFailure({ error: 500, message: \"Something went wrong!\" });\r\n  }\r\n\r\n  return mockSuccess({ auth_token: \"successful_fake_token\" });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}